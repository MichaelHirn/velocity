{
    "project": {
        "name": "Velocity",
        "description": "Test runner for Meteor apps",
        "version": "0.2.13"
    },
    "files": {
        ".build.velocity:core/os.osx.x86_64/packages/velocity:core/default-fixture.js": {
            "name": ".build.velocity:core/os.osx.x86_64/packages/velocity:core/default-fixture.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        ".build.velocity:core/os.osx.x86_64/packages/velocity:core.js": {
            "name": ".build.velocity:core/os.osx.x86_64/packages/velocity:core.js",
            "modules": {
                "Velocity                                                                                                    // 10\n/                                                                                                                    // 11\n/**                                                                                                                    // 12\nThe `Velocity` object provides a common API for test frameworks to report                                           // 13\ntest results.  Frameworks can also request assets, such as a copy of the                                            // 14\nuser's application (the 'mirror') in which tests can be safely run without                                          // 15\nimpacting on-going development.                                                                                     // 16\n                                                                                                                    // 17\nTest results and log activity are reported via                                                                      // 18\n{{#crossLink \"Meteor.methods\"}}Meteor methods{{/crossLink}}.                                                        // 19\n                                                                                                                    // 20": 1
            },
            "classes": {
                "Velocity                                                                                                     // 21\n/                                                                                                                    // 22\nVelocity = {};                                                                                                         // 23\n                                                                                                                      // 24\n(function () {                                                                                                         // 25\n 'use strict';                                                                                                        // 26\n                                                                                                                      // 27\n//////////////////////////////////////////////////////////////////////                                                 // 28\n// Init                                                                                                                // 29\n//                                                                                                                     // 30\n                                                                                                                      // 31\n if (process.env.NODE_ENV !== 'development' ||                                                                        // 32\n     process.env.VELOCITY === '0' ||                                                                                  // 33\n     process.env.IS_MIRROR) {                                                                                         // 34\n   DEBUG && console.log('[velocity] ' + (process.env.IS_MIRROR ? 'Mirror detected -' : '') + 'Not adding velocity core');\n   return;                                                                                                            // 36\n }                                                                                                                    // 37\n                                                                                                                      // 38\n var getAssetPath = function (packageName, fileName) {                                                                // 39\n   var serverAssetsPath = path.join(                                                                                  // 40\n     findAppDir(), '.meteor', 'local', 'build', 'programs', 'server', 'assets'                                        // 41\n   );                                                                                                                 // 42\n                                                                                                                      // 43\n   packageName = packageName.replace(':', '_');                                                                       // 44\n                                                                                                                      // 45\n   return path.join(serverAssetsPath, 'packages', packageName, fileName);                                             // 46\n };                                                                                                                   // 47\n                                                                                                                      // 48\n var _ = Npm.require('lodash'),                                                                                       // 49\n     fs = Npm.require('fs'),                                                                                          // 50\n     fse = Npm.require('fs-extra'),                                                                                   // 51\n     outputFile = Meteor.wrapAsync(fse.outputFile),                                                                   // 52\n     copyFile = Meteor.wrapAsync(fse.copy),                                                                           // 53\n     path = Npm.require('path'),                                                                                      // 54\n     url = Npm.require('url'),                                                                                        // 55\n     Rsync = Npm.require('rsync'),                                                                                    // 56\n     child_process = Npm.require('child_process'),                                                                    // 57\n     chokidar = Npm.require('chokidar'),                                                                              // 58\n     mkdirp = Npm.require('mkdirp'),                                                                                  // 59\n     _config = {},                                                                                                    // 60\n     _preProcessors = [],                                                                                             // 61\n     _postProcessors = [],                                                                                            // 62\n     _watcher,                                                                                                        // 63\n     FIXTURE_REG_EXP = new RegExp('-fixture.(js|coffee)$'),                                                           // 64\n     DEFAULT_FIXTURE_PATH = getAssetPath('velocity:core', 'default-fixture.js'),                                      // 65\n     MIRROR_PID_VAR_TEMPLATE = 'mirror.@PORT.pid';                                                                    // 66\n                                                                                                                      // 67\n Meteor.startup(function initializeVelocity () {                                                                      // 68\n   DEBUG && console.log('[velocity] app dir', Velocity.getAppPath());                                                 // 69\n   DEBUG && console.log('velocity config =', JSON.stringify(_config, null, 2));                                       // 70\n                                                                                                                      // 71\n   // kick-off everything                                                                                             // 72\n   _reset(_config);                                                                                                   // 73\n });                                                                                                                  // 74\n                                                                                                                      // 75\n//////////////////////////////////////////////////////////////////////                                                 // 76\n// Public Methods                                                                                                      // 77\n//                                                                                                                     // 78\n                                                                                                                      // 79\n _.extend(Velocity, {                                                                                                 // 80\n                                                                                                                      // 81\n   /**                                                                                                                // 82\nGet application directory path.                                                                                 // 83\n                                                                                                                // 84": 1
            },
            "fors": {},
            "namespaces": {}
        },
        ".build326888..build.velocity:core/os.osx.x86_64/packages/velocity:core/default-fixture.js": {
            "name": ".build326888..build.velocity:core/os.osx.x86_64/packages/velocity:core/default-fixture.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        ".build326888..build.velocity:core/os.osx.x86_64/packages/velocity:core.js": {
            "name": ".build326888..build.velocity:core/os.osx.x86_64/packages/velocity:core.js",
            "modules": {},
            "classes": {
                "Meteor.methods                                                                                             // 187\n/                                                                                                                  // 188\n Meteor.methods({                                                                                                     // 189\n                                                                                                                      // 190\n   /**                                                                                                                // 191\nRe-init file watcher and clear all test results.                                                                // 192\n                                                                                                                // 193": 1,
                "FileCopier                                                                                                   // 12": 1,
                "Velocity                                                                                                     // 21\n/                                                                                                                    // 22\nVelocity = {};                                                                                                         // 23\n                                                                                                                      // 24\n(function () {                                                                                                         // 25\n 'use strict';                                                                                                        // 26\n                                                                                                                      // 27\n//////////////////////////////////////////////////////////////////////                                                 // 28\n// Init                                                                                                                // 29\n//                                                                                                                     // 30\n                                                                                                                      // 31\n if (process.env.NODE_ENV !== 'development' ||                                                                        // 32\n   process.env.VELOCITY === '0' ||                                                                                    // 33\n   process.env.IS_MIRROR) {                                                                                           // 34\n   DEBUG && console.log('[velocity] ' + (process.env.IS_MIRROR ? 'Mirror detected -' : '') + 'Not adding velocity core');\n   return;                                                                                                            // 36\n }                                                                                                                    // 37\n                                                                                                                      // 38\n var getAssetPath = function (packageName, fileName) {                                                                // 39\n   var serverAssetsPath = path.join(                                                                                  // 40\n     findAppDir(), '.meteor', 'local', 'build', 'programs', 'server', 'assets'                                        // 41\n   );                                                                                                                 // 42\n                                                                                                                      // 43\n   packageName = packageName.replace(':', '_');                                                                       // 44\n                                                                                                                      // 45\n   return path.join(serverAssetsPath, 'packages', packageName, fileName);                                             // 46\n };                                                                                                                   // 47\n                                                                                                                      // 48\n var _ = Npm.require('lodash'),                                                                                       // 49\n     fs = Npm.require('fs'),                                                                                          // 50\n     fse = Npm.require('fs-extra'),                                                                                   // 51\n     outputFile = Meteor.wrapAsync(fse.outputFile),                                                                   // 52\n     copyFile = Meteor.wrapAsync(fse.copy),                                                                           // 53\n     path = Npm.require('path'),                                                                                      // 54\n     url = Npm.require('url'),                                                                                        // 55\n     Rsync = Npm.require('rsync'),                                                                                    // 56\n     child_process = Npm.require('child_process'),                                                                    // 57\n     chokidar = Npm.require('chokidar'),                                                                              // 58\n     mkdirp = Npm.require('mkdirp'),                                                                                  // 59\n     _config = {},                                                                                                    // 60\n     _preProcessors = [],                                                                                             // 61\n     _postProcessors = [],                                                                                            // 62\n     _watcher,                                                                                                        // 63\n     FIXTURE_REG_EXP = new RegExp('-fixture.(js|coffee)$'),                                                           // 64\n     DEFAULT_FIXTURE_PATH = getAssetPath('velocity:core', 'default-fixture.js'),                                      // 65\n     MIRROR_PID_VAR_TEMPLATE = 'mirror.@PORT.pid';                                                                    // 66\n                                                                                                                      // 67\n Meteor.startup(function initializeVelocity () {                                                                      // 68\n   DEBUG && console.log('[velocity] app dir', Velocity.getAppPath());                                                 // 69\n   DEBUG && console.log('velocity config =', JSON.stringify(_config, null, 2));                                       // 70\n                                                                                                                      // 71\n   // kick-off everything                                                                                             // 72\n   _reset(_config);                                                                                                   // 73\n });                                                                                                                  // 74\n                                                                                                                      // 75\n//////////////////////////////////////////////////////////////////////                                                 // 76\n// Public Methods                                                                                                      // 77\n//                                                                                                                     // 78\n                                                                                                                      // 79\n _.extend(Velocity, {                                                                                                 // 80\n                                                                                                                      // 81\n   /**                                                                                                                // 82\nGet application directory path.                                                                                 // 83\n                                                                                                                // 84": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/meteor/files.js": {
            "name": "lib/meteor/files.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/FileCopier.js": {
            "name": "lib/FileCopier.js",
            "modules": {},
            "classes": {
                "FileCopier": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "core.js": {
            "name": "core.js",
            "modules": {
                "Velocity": 1
            },
            "classes": {
                "Velocity": 1,
                "Meteor.methods": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "default-fixture.js": {
            "name": "default-fixture.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Velocity                                                                                                    // 10\n/                                                                                                                    // 11\n/**                                                                                                                    // 12\nThe `Velocity` object provides a common API for test frameworks to report                                           // 13\ntest results.  Frameworks can also request assets, such as a copy of the                                            // 14\nuser's application (the 'mirror') in which tests can be safely run without                                          // 15\nimpacting on-going development.                                                                                     // 16\n                                                                                                                    // 17\nTest results and log activity are reported via                                                                      // 18\n{{#crossLink \"Meteor.methods\"}}Meteor methods{{/crossLink}}.                                                        // 19\n                                                                                                                    // 20": {
            "name": "Velocity                                                                                                    // 10\n/                                                                                                                    // 11\n/**                                                                                                                    // 12\nThe `Velocity` object provides a common API for test frameworks to report                                           // 13\ntest results.  Frameworks can also request assets, such as a copy of the                                            // 14\nuser's application (the 'mirror') in which tests can be safely run without                                          // 15\nimpacting on-going development.                                                                                     // 16\n                                                                                                                    // 17\nTest results and log activity are reported via                                                                      // 18\n{{#crossLink \"Meteor.methods\"}}Meteor methods{{/crossLink}}.                                                        // 19\n                                                                                                                    // 20",
            "submodules": {},
            "classes": {
                "Velocity                                                                                                     // 21\n/                                                                                                                    // 22\nVelocity = {};                                                                                                         // 23\n                                                                                                                      // 24\n(function () {                                                                                                         // 25\n 'use strict';                                                                                                        // 26\n                                                                                                                      // 27\n//////////////////////////////////////////////////////////////////////                                                 // 28\n// Init                                                                                                                // 29\n//                                                                                                                     // 30\n                                                                                                                      // 31\n if (process.env.NODE_ENV !== 'development' ||                                                                        // 32\n     process.env.VELOCITY === '0' ||                                                                                  // 33\n     process.env.IS_MIRROR) {                                                                                         // 34\n   DEBUG && console.log('[velocity] ' + (process.env.IS_MIRROR ? 'Mirror detected -' : '') + 'Not adding velocity core');\n   return;                                                                                                            // 36\n }                                                                                                                    // 37\n                                                                                                                      // 38\n var getAssetPath = function (packageName, fileName) {                                                                // 39\n   var serverAssetsPath = path.join(                                                                                  // 40\n     findAppDir(), '.meteor', 'local', 'build', 'programs', 'server', 'assets'                                        // 41\n   );                                                                                                                 // 42\n                                                                                                                      // 43\n   packageName = packageName.replace(':', '_');                                                                       // 44\n                                                                                                                      // 45\n   return path.join(serverAssetsPath, 'packages', packageName, fileName);                                             // 46\n };                                                                                                                   // 47\n                                                                                                                      // 48\n var _ = Npm.require('lodash'),                                                                                       // 49\n     fs = Npm.require('fs'),                                                                                          // 50\n     fse = Npm.require('fs-extra'),                                                                                   // 51\n     outputFile = Meteor.wrapAsync(fse.outputFile),                                                                   // 52\n     copyFile = Meteor.wrapAsync(fse.copy),                                                                           // 53\n     path = Npm.require('path'),                                                                                      // 54\n     url = Npm.require('url'),                                                                                        // 55\n     Rsync = Npm.require('rsync'),                                                                                    // 56\n     child_process = Npm.require('child_process'),                                                                    // 57\n     chokidar = Npm.require('chokidar'),                                                                              // 58\n     mkdirp = Npm.require('mkdirp'),                                                                                  // 59\n     _config = {},                                                                                                    // 60\n     _preProcessors = [],                                                                                             // 61\n     _postProcessors = [],                                                                                            // 62\n     _watcher,                                                                                                        // 63\n     FIXTURE_REG_EXP = new RegExp('-fixture.(js|coffee)$'),                                                           // 64\n     DEFAULT_FIXTURE_PATH = getAssetPath('velocity:core', 'default-fixture.js'),                                      // 65\n     MIRROR_PID_VAR_TEMPLATE = 'mirror.@PORT.pid';                                                                    // 66\n                                                                                                                      // 67\n Meteor.startup(function initializeVelocity () {                                                                      // 68\n   DEBUG && console.log('[velocity] app dir', Velocity.getAppPath());                                                 // 69\n   DEBUG && console.log('velocity config =', JSON.stringify(_config, null, 2));                                       // 70\n                                                                                                                      // 71\n   // kick-off everything                                                                                             // 72\n   _reset(_config);                                                                                                   // 73\n });                                                                                                                  // 74\n                                                                                                                      // 75\n//////////////////////////////////////////////////////////////////////                                                 // 76\n// Public Methods                                                                                                      // 77\n//                                                                                                                     // 78\n                                                                                                                      // 79\n _.extend(Velocity, {                                                                                                 // 80\n                                                                                                                      // 81\n   /**                                                                                                                // 82\nGet application directory path.                                                                                 // 83\n                                                                                                                // 84": 1,
                "Meteor.methods                                                                                             // 187\n/                                                                                                                  // 188\n Meteor.methods({                                                                                                     // 189\n                                                                                                                      // 190\n   /**                                                                                                                // 191\nRe-init file watcher and clear all test results.                                                                // 192\n                                                                                                                // 193": 1,
                "FileCopier                                                                                                   // 12": 1,
                "Velocity                                                                                                     // 21\n/                                                                                                                    // 22\nVelocity = {};                                                                                                         // 23\n                                                                                                                      // 24\n(function () {                                                                                                         // 25\n 'use strict';                                                                                                        // 26\n                                                                                                                      // 27\n//////////////////////////////////////////////////////////////////////                                                 // 28\n// Init                                                                                                                // 29\n//                                                                                                                     // 30\n                                                                                                                      // 31\n if (process.env.NODE_ENV !== 'development' ||                                                                        // 32\n   process.env.VELOCITY === '0' ||                                                                                    // 33\n   process.env.IS_MIRROR) {                                                                                           // 34\n   DEBUG && console.log('[velocity] ' + (process.env.IS_MIRROR ? 'Mirror detected -' : '') + 'Not adding velocity core');\n   return;                                                                                                            // 36\n }                                                                                                                    // 37\n                                                                                                                      // 38\n var getAssetPath = function (packageName, fileName) {                                                                // 39\n   var serverAssetsPath = path.join(                                                                                  // 40\n     findAppDir(), '.meteor', 'local', 'build', 'programs', 'server', 'assets'                                        // 41\n   );                                                                                                                 // 42\n                                                                                                                      // 43\n   packageName = packageName.replace(':', '_');                                                                       // 44\n                                                                                                                      // 45\n   return path.join(serverAssetsPath, 'packages', packageName, fileName);                                             // 46\n };                                                                                                                   // 47\n                                                                                                                      // 48\n var _ = Npm.require('lodash'),                                                                                       // 49\n     fs = Npm.require('fs'),                                                                                          // 50\n     fse = Npm.require('fs-extra'),                                                                                   // 51\n     outputFile = Meteor.wrapAsync(fse.outputFile),                                                                   // 52\n     copyFile = Meteor.wrapAsync(fse.copy),                                                                           // 53\n     path = Npm.require('path'),                                                                                      // 54\n     url = Npm.require('url'),                                                                                        // 55\n     Rsync = Npm.require('rsync'),                                                                                    // 56\n     child_process = Npm.require('child_process'),                                                                    // 57\n     chokidar = Npm.require('chokidar'),                                                                              // 58\n     mkdirp = Npm.require('mkdirp'),                                                                                  // 59\n     _config = {},                                                                                                    // 60\n     _preProcessors = [],                                                                                             // 61\n     _postProcessors = [],                                                                                            // 62\n     _watcher,                                                                                                        // 63\n     FIXTURE_REG_EXP = new RegExp('-fixture.(js|coffee)$'),                                                           // 64\n     DEFAULT_FIXTURE_PATH = getAssetPath('velocity:core', 'default-fixture.js'),                                      // 65\n     MIRROR_PID_VAR_TEMPLATE = 'mirror.@PORT.pid';                                                                    // 66\n                                                                                                                      // 67\n Meteor.startup(function initializeVelocity () {                                                                      // 68\n   DEBUG && console.log('[velocity] app dir', Velocity.getAppPath());                                                 // 69\n   DEBUG && console.log('velocity config =', JSON.stringify(_config, null, 2));                                       // 70\n                                                                                                                      // 71\n   // kick-off everything                                                                                             // 72\n   _reset(_config);                                                                                                   // 73\n });                                                                                                                  // 74\n                                                                                                                      // 75\n//////////////////////////////////////////////////////////////////////                                                 // 76\n// Public Methods                                                                                                      // 77\n//                                                                                                                     // 78\n                                                                                                                      // 79\n _.extend(Velocity, {                                                                                                 // 80\n                                                                                                                      // 81\n   /**                                                                                                                // 82\nGet application directory path.                                                                                 // 83\n                                                                                                                // 84": 1,
                "FileCopier": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/FileCopier.js",
            "line": 9,
            "description": "Copied from Meteor tools/files.js.                                                                                  // 2\n                                                                                                                    // 3\nIncludes:                                                                                                           // 4\n- Helper to find the app root path                                                                                  // 5\n/                                                                                                                    // 6\n                                                                                                                      // 7\nvar path = Npm.require('path');                                                                                        // 8\nvar fs = Npm.require('fs');                                                                                            // 9\n                                                                                                                      // 10\n// given a predicate function and a starting path, traverse upwards                                                    // 11\n// from the path until we find a path that satisfies the predicate.                                                    // 12\n//                                                                                                                     // 13\n// returns either the path to the lowest level directory that passed                                                   // 14\n// the test or null for none found. if starting path isn't given, use                                                  // 15\n// cwd.                                                                                                                // 16\nvar findUpwards = function (predicate, startPath) {                                                                    // 17\n var testDir = startPath || process.cwd();                                                                            // 18\n while (testDir) {                                                                                                    // 19\n   if (predicate(testDir)) {                                                                                          // 20\n     break;                                                                                                           // 21\n   }                                                                                                                  // 22\n   var newDir = path.dirname(testDir);                                                                                // 23\n   if (newDir === testDir) {                                                                                          // 24\n     testDir = null;                                                                                                  // 25\n   } else {                                                                                                           // 26\n     testDir = newDir;                                                                                                // 27\n   }                                                                                                                  // 28\n }                                                                                                                    // 29\n if (!testDir)                                                                                                        // 30\n   return null;                                                                                                       // 31\n                                                                                                                      // 32\n return testDir;                                                                                                      // 33\n};                                                                                                                     // 34\n                                                                                                                      // 35\n// Determine if 'filepath' (a path, or omit for cwd) is within an app                                                  // 36\n// directory. If so, return the top-level app directory.                                                               // 37\nfindAppDir = function (filepath) {                                                                                     // 38\n var isAppDir = function (filepath) {                                                                                 // 39\n   // XXX once we are done with the transition to engine, this should                                                 // 40\n   // change to: `return fs.existsSync(path.join(filepath, '.meteor',                                                 // 41\n   // 'release'))`                                                                                                    // 42\n                                                                                                                      // 43\n   // .meteor/packages can be a directory, if .meteor is a warehouse                                                  // 44\n   // directory.  since installing meteor initializes a warehouse at                                                  // 45\n   // $HOME/.meteor, we want to make sure your home directory (and all                                                // 46\n   // subdirectories therein) don't count as being within a meteor app.                                               // 47\n   try { // use try/catch to avoid the additional syscall to fs.existsSync                                            // 48\n     return fs.statSync(path.join(filepath, '.meteor', 'packages')).isFile();                                         // 49\n   } catch (e) {                                                                                                      // 50\n     return false;                                                                                                    // 51\n   }                                                                                                                  // 52\n };                                                                                                                   // 53\n                                                                                                                      // 54\n return findUpwards(isAppDir, filepath);                                                                              // 55\n};                                                                                                                     // 56\n                                                                                                                      // 57\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/velocity:core/core.js                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/*jshint -W117, -W030, -W016 */                                                                                        // 1\n/* global                                                                                                              // 2\nVelocity:true,                                                                                                        // 3\nDEBUG:true                                                                                                            // 4\n/                                                                                                                    // 5\n                                                                                                                      // 6\nDEBUG = !!process.env.VELOCITY_DEBUG;                                                                                  // 7\n                                                                                                                      // 8\n/**                                                                                                                    // 9",
            "itemtype": "method",
            "return": {
                "description": "Mirror URL                                                                                      // 696",
                "type": "String"
            },
            "params": [
                {
                    "name": "preprocessor",
                    "description": "// 118\n/                                                                                                                // 119\n   addPreProcessor: function (preProcessor) {                                                                         // 120\n     _preProcessors.push(preProcessor);                                                                               // 121\n   },                                                                                                                 // 122\n                                                                                                                      // 123\n   /**                                                                                                                // 124\nAdd a callback which will execute after all tests have completed                                                // 125\nand after the aggregate test results have been reported.                                                        // 126\n                                                                                                                // 127",
                    "type": "Function"
                },
                {
                    "name": "reporter",
                    "description": "// 129\n/                                                                                                                // 130\n   addPostProcessor: function (reporter) {                                                                            // 131\n     _postProcessors.push(reporter);                                                                                  // 132\n   },                                                                                                                 // 133\n                                                                                                                      // 134\n   /**                                                                                                                // 135\nGet a message that displays where bugs in Velocity core itself should                                           // 136\nbe reported.                                                                                                    // 137\n                                                                                                                // 138",
                    "type": "Function"
                },
                {
                    "name": "name",
                    "description": "The name of the testing framework.                                 // 154",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options for the testing framework.                                 // 155",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "disableAutoReset",
                            "description": "Velocity's reset cycle will skip reports and logs for this framework\n                                           It will be the responsibility of the framework to clean up its ****!",
                            "type": "String"
                        },
                        {
                            "name": "regex",
                            "description": "The regular expression for test files that should be assigned      // 158\n                                           to the testing framework.                                          // 159\n                                           The path relative to the tests                                     // 160\n                                           folder is matched against it.                                      // 161\n                                           The default is \"name/.+\\.js$\"                                      // 162\n                                           (name is the testing framework name).                              // 163",
                            "type": "String"
                        },
                        {
                            "name": "sampleTestGenerator",
                            "description": "sampleTestGenerator                                             // 164\n   returns an array of fileObjects with the following fields:                                                 // 165",
                            "type": "Function",
                            "props": [
                                {
                                    "name": "path",
                                    "description": "relative path to place test file (from PROJECT/tests)        // 166",
                                    "type": "String"
                                },
                                {
                                    "name": "contents",
                                    "description": "contents of the test file the path that's returned       // 167\n/                                                                                                              // 168\n     registerTestingFramework: function (name, options) {                                                             // 169\n       _config[name] = _parseTestingFrameworkOptions(name, options);                                                  // 170\n                                                                                                                      // 171\n       // make sure the appropriate aggregate records are added                                                       // 172\n       _reset(_config);                                                                                               // 173\n     }                                                                                                                // 174\n   });                                                                                                                // 175\n }                                                                                                                    // 176\n                                                                                                                      // 177\n                                                                                                                      // 178\n//////////////////////////////////////////////////////////////////////                                                 // 179\n// Meteor Methods                                                                                                      // 180\n//                                                                                                                     // 181\n                                                                                                                      // 182\n /**                                                                                                                  // 183\nMost communication with Velocity core is done via the following                                                   // 184\nMeteor methods.                                                                                                   // 185\n                                                                                                                  // 186",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "// 204",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "",
                            "description": "The name of a specific framework                                            // 205\n                 to clear results for.  Ex. 'jasmine' or 'mocha'                                                // 206",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "A list of test Ids which should be kept                                          // 207\n                               (not cleared).  These Ids must match the                                         // 208\n                               ones passed to `velocity/reports/submit`.                                        // 209\n/                                                                                                                // 210\n   'velocity/reports/reset': function (options) {                                                                     // 211\n     options = options || {};                                                                                         // 212\n     check(options, {                                                                                                 // 213\n       framework: Match.Optional(String),                                                                             // 214\n       notIn: Match.Optional([String])                                                                                // 215\n     });                                                                                                              // 216\n                                                                                                                      // 217\n     var query = {};                                                                                                  // 218\n     if (options.framework) {                                                                                         // 219\n       query.framework = options.framework;                                                                           // 220\n     }                                                                                                                // 221\n     if (options.notIn) {                                                                                             // 222\n       query = _.assign(query, {_id: {$nin: options.notIn}});                                                         // 223\n     }                                                                                                                // 224\n     VelocityTestReports.remove(query);                                                                               // 225\n     _updateAggregateReports();                                                                                       // 226\n   },                                                                                                                 // 227\n                                                                                                                      // 228\n                                                                                                                      // 229\n   /**                                                                                                                // 230\nClear all log entries.                                                                                          // 231\n                                                                                                                // 232",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "// 234",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "",
                            "description": "The name of a specific framework                                            // 235\n                                    to clear logs for.                                                          // 236\n/                                                                                                                // 237\n   'velocity/logs/reset': function (options) {                                                                        // 238\n     options = options || {};                                                                                         // 239\n     check(options, {                                                                                                 // 240\n       framework: Match.Optional(String)                                                                              // 241\n     });                                                                                                              // 242\n                                                                                                                      // 243\n     var query = {};                                                                                                  // 244\n     if (options.framework) {                                                                                         // 245\n       query.framework = options.framework;                                                                           // 246\n     }                                                                                                                // 247\n     VelocityLogs.remove(query);                                                                                      // 248\n   },                                                                                                                 // 249\n                                                                                                                      // 250\n                                                                                                                      // 251\n   /**                                                                                                                // 252\nLog a message to the Velocity log store.  This provides a central                                               // 253\nlocation for different reporters to query for test framework log                                                // 254\nentries.                                                                                                        // 255\n                                                                                                                // 256",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "// 258",
                    "type": "Object",
                    "props": [
                        {
                            "name": "",
                            "description": "The name of the test framework                                                // 259",
                            "type": "String"
                        },
                        {
                            "name": "",
                            "description": "The message to log                                                              // 260",
                            "type": "String"
                        },
                        {
                            "name": "",
                            "description": "Log level.  Ex. 'error'. Default: 'info'                                        // 261",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "// 262\n/                                                                                                                // 263\n   'velocity/logs/submit': function (options) {                                                                       // 264\n     check(options, {                                                                                                 // 265\n       framework: String,                                                                                             // 266\n       message: String,                                                                                               // 267\n       level: Match.Optional(String),                                                                                 // 268\n       timestamp: Match.Optional(Match.OneOf(Date, String))                                                           // 269\n     });                                                                                                              // 270\n                                                                                                                      // 271\n     VelocityLogs.insert({                                                                                            // 272\n       timestamp: options.timestamp || new Date(),                                                                    // 273\n       level: options.level || 'info',                                                                                // 274\n       message: options.message,                                                                                      // 275\n       framework: options.framework                                                                                   // 276\n     });                                                                                                              // 277\n   },                                                                                                                 // 278\n                                                                                                                      // 279\n                                                                                                                      // 280\n   /**                                                                                                                // 281\nRecord the results of an individual test run; a simple collector of                                             // 282\ntest data.                                                                                                      // 283\n                                                                                                                // 284\nThe `data` object is stored in its entirety; any field may be passed in.                                        // 285\nThe optional fields documented here are suggestions based on what the                                           // 286\nstandard html-reporter supports.  Whether or not a field is actually                                            // 287\nused is up to the specific test reporter that the user has installed.                                           // 288\n                                                                                                                // 289",
                            "type": "Date",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "data",
                    "description": "// 291",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "Name of the test that was executed.                                                   // 292",
                            "type": "String"
                        },
                        {
                            "name": "framework",
                            "description": "Name of a testing framework.                                                     // 293\n                               For example, 'jasmine' or 'mocha'.                                               // 294",
                            "type": "String"
                        },
                        {
                            "name": "result",
                            "description": "The results of the test.  Standard values                                           // 295\n                            are 'passed' and 'failed'.  Different test                                          // 296\n                            reporters can support other values.  For                                            // 297\n                            example, the aggregate tests collection uses                                        // 298\n                            'pending' to indicate that results are still                                        // 299\n                            coming in.                                                                          // 300",
                            "type": "String"
                        },
                        {
                            "name": "id",
                            "description": "Used to update a specific test result.  If not                                        // 301\n                          provided, frameworks can use the                                                      // 302\n                          `velocity/reports/reset` Meteor method to                                             // 303\n                          clear all tests.                                                                      // 304",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "ancestors",
                            "description": "The hierarchy of suites and blocks above                                        // 305\n                                this test. For example,                                                         // 306\n                             ['Template', 'leaderboard', 'selected_name']                                       // 307",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "timestamp",
                            "description": "The time that the test started for this                                          // 308\n                               result.                                                                          // 309",
                            "type": "Date",
                            "optional": true
                        },
                        {
                            "name": "duration",
                            "description": "The test duration in milliseconds.                                              // 310",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "browser",
                            "description": "Which browser did the test run in?                                               // 311",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "failureType",
                            "description": "For example, 'expect' or 'assert'                                            // 312",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "failureMessage",
                            "description": "// 313",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "failureStackTrace",
                            "description": "The stack trace associated with                                        // 314\n                                         the failure                                                            // 315\n/                                                                                                                // 316\n   'velocity/reports/submit': function (data) {                                                                       // 317\n     check(data, Match.ObjectIncluding({                                                                              // 318\n       name: String,                                                                                                  // 319\n       framework: String,                                                                                             // 320\n       result: String,                                                                                                // 321\n       id: Match.Optional(String),                                                                                    // 322\n       ancestors: Match.Optional([String]),                                                                           // 323\n       timestamp: Match.Optional(Match.OneOf(Date, String)),                                                          // 324\n       duration: Match.Optional(Number),                                                                              // 325\n       browser: Match.Optional(String),                                                                               // 326\n       failureType: Match.Optional(String),                                                                           // 327\n       failureMessage: Match.Optional(String),                                                                        // 328\n       failureStackTrace: Match.Optional(Match.Any)                                                                   // 329\n     }));                                                                                                             // 330\n                                                                                                                      // 331\n     data.timestamp = data.timestamp || new Date();                                                                   // 332\n     data.id = data.id || Random.id();                                                                                // 333\n                                                                                                                      // 334\n     VelocityTestReports.upsert(data.id, {$set: data});                                                               // 335\n                                                                                                                      // 336\n     _updateAggregateReports();                                                                                       // 337\n   },  // end postResult                                                                                              // 338\n                                                                                                                      // 339\n                                                                                                                      // 340\n   /**                                                                                                                // 341\nFrameworks must call this method to inform Velocity they have completed                                         // 342\ntheir current test runs. Velocity uses this flag when running in CI mode.                                       // 343\n                                                                                                                // 344",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "data",
                    "description": "// 346",
                    "type": "Object",
                    "props": [
                        {
                            "name": "",
                            "description": "Name of a test framework.  Ex. 'jasmine'                                         // 347\n/                                                                                                                // 348\n   'velocity/reports/completed': function (data) {                                                                    // 349\n     check(data, {                                                                                                    // 350\n       framework: String                                                                                              // 351\n     });                                                                                                              // 352\n                                                                                                                      // 353\n     VelocityAggregateReports.upsert({'name': data.framework},                                                        // 354\n                                     {$set: {'result': 'completed'}});                                                // 355\n     _updateAggregateReports();                                                                                       // 356\n   },  // end completed                                                                                               // 357\n                                                                                                                      // 358\n                                                                                                                      // 359\n   /**                                                                                                                // 360\nCopy sample tests from frameworks `sample-tests` directories                                                    // 361\nto the user's application's `tests` directory.                                                                  // 362\n                                                                                                                // 363",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "// 366",
                    "type": "Object",
                    "props": [
                        {
                            "name": "",
                            "description": "Framework name. Ex. 'jasmine', 'mocha'                                        // 367\n/                                                                                                                // 368\n   'velocity/copySampleTests': function (options) {                                                                   // 369\n     var sampleTests,                                                                                                 // 370\n         samplesPath,                                                                                                 // 371\n         testsPath,                                                                                                   // 372\n         command;                                                                                                     // 373\n                                                                                                                      // 374\n     options = options || {};                                                                                         // 375\n     check(options, {                                                                                                 // 376\n       framework: String                                                                                              // 377\n     });                                                                                                              // 378\n                                                                                                                      // 379\n     if (_config[options.framework].sampleTestGenerator) {                                                            // 380\n                                                                                                                      // 381\n       sampleTests = _config[options.framework].sampleTestGenerator(options);                                         // 382\n                                                                                                                      // 383\n       DEBUG && console.log('[velocity] found ', sampleTests.length,                                                  // 384\n                            'sample test files for', options.framework);                                              // 385\n                                                                                                                      // 386\n       sampleTests.forEach(function (testFile) {                                                                      // 387\n         var fullTestPath = path.join(Velocity.getTestsPath(), testFile.path);                                        // 388\n         var testDir = path.dirname(fullTestPath);                                                                    // 389\n         mkdirp.sync(testDir);                                                                                        // 390\n         fs.writeFileSync(fullTestPath, testFile.contents);                                                           // 391\n       });                                                                                                            // 392\n                                                                                                                      // 393\n     } else {                                                                                                         // 394\n                                                                                                                      // 395\n       samplesPath = path.join(Velocity.getAppPath(), 'packages',                                                     // 396\n                               options.framework, 'sample-tests');                                                    // 397\n       testsPath = Velocity.getTestsPath();                                                                           // 398\n                                                                                                                      // 399\n       DEBUG && console.log('[velocity] checking for sample tests in',                                                // 400\n                             path.join(samplesPath, '*'));                                                            // 401\n                                                                                                                      // 402\n       if (fs.existsSync(samplesPath)) {                                                                              // 403\n         command = 'mkdir -p ' + testsPath + ' && ' +                                                                 // 404\n                   'rsync -au ' + path.join(samplesPath, '*') +                                                       // 405\n                   ' ' + testsPath + path.sep;                                                                        // 406\n                                                                                                                      // 407\n         DEBUG && console.log('[velocity] copying sample tests (if any) ' +                                           // 408\n                              'for framework', options.framework, '-',                                                // 409\n                              command);                                                                               // 410\n                                                                                                                      // 411\n         child_process.exec(command, Meteor.bindEnvironment(                                                          // 412\n           function copySampleTestsExecHandler (err, stdout, stderr) {                                                // 413\n             if (err) {                                                                                               // 414\n               console.error('ERROR', err);                                                                           // 415\n             }                                                                                                        // 416\n             console.log(stdout);                                                                                     // 417\n             console.error(stderr);                                                                                   // 418\n           },                                                                                                         // 419\n           'copySampleTestsExecHandler'                                                                               // 420\n         ));                                                                                                          // 421\n       }                                                                                                              // 422\n                                                                                                                      // 423\n     }                                                                                                                // 424\n   },  // end copySampleTests                                                                                         // 425\n                                                                                                                      // 426\n                                                                                                                      // 427\n   /**                                                                                                                // 428\nStarts a new mirror if it has not already been started, and reuses an                                           // 429\nexisting one if it is already started.                                                                          // 430\n                                                                                                                // 431\nThis method will update the `VelocityMirrors` collection with `requestId`                                       // 432\nonce the mirror is ready for use.                                                                               // 433\n                                                                                                                // 434",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "Options for the mirror.                                                // 437",
                    "type": "Object",
                    "props": [
                        {
                            "name": "",
                            "description": "The name of the calling framework                                      // 438",
                            "type": "String"
                        },
                        {
                            "name": "",
                            "description": "Array of files with absolute paths                                     // 439",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "String use a specific port                                             // 440",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "Id for the mirror that may be used to query the mirror for status info // 441",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "Adds this string to the end of the root url in the VelocityMirrors collection.\n                                         eg. `/?jasmine=true`                                                   // 443\n                                         Request parameters that velocity-ci uses.                              // 444\n                                                                                                                // 445",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "Required fields:                                                                          // 525\n                  framework - String ex. 'mocha-web-1'                                                            // 526\n                  rootUrl - String ex. 'http://localhost:5000/x=y'                                                // 527\n                                                                                                                  // 528\n                Optional parameters:                                                                              // 529\n                  fixtureFiles - Array of files with absolute paths                                               // 530\n                  port - String use a specific port instead of finding the next available one                     // 531\n                  next - function to call after the mirror has started                                            // 532\n                                                                                                                  // 533",
                    "type": "Object",
                    "props": []
                },
                {
                    "name": "options",
                    "description": "Required fields:                                                                          // 577\n                  framework - String ex. 'mocha-web-1'                                                            // 578\n                  port - String the port the mirror that just started / was reused is using                       // 579\n                  requestId - the request id to put in the mirror metadata                                        // 580\n                                                                                                                  // 581",
                    "type": "Object",
                    "props": []
                },
                {
                    "name": "port",
                    "description": "this is used to look up the PID for the mirror if it was started by Velocity                          // 651"
                },
                {
                    "name": "database",
                    "description": "// 678"
                },
                {
                    "name": "port",
                    "description": "Mirror port                                                                                           // 695"
                },
                {
                    "name": "fixtureFiles",
                    "description": "Array with fixture file paths.                                                                // 712"
                },
                {
                    "name": "config",
                    "description": "See `registerTestingFramework`.                                                           // 740",
                    "type": "Object"
                },
                {
                    "name": "config",
                    "description": "See `registerTestingFramework`.                                                           // 820",
                    "type": "Object"
                },
                {
                    "name": "force",
                    "description": "performs an rsync even if no mirrors have been requested                                             // 913"
                },
                {
                    "name": "options",
                    "description": "// 14",
                    "type": "Object",
                    "props": [
                        {
                            "name": "",
                            "description": "The name of the target framework                                            // 15\n                                        for which the tests should be copied                                        // 16\n                                        to the mirror.                                                              // 17",
                            "type": "String"
                        },
                        {
                            "name": "",
                            "description": "Callback that is called after a                                             // 18\n                                        file was added.                                                             // 19",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "Callback that is called after a                                           // 20\n                                          file has changed.                                                         // 21",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "Callback that is called after a                                           // 22\n                                          file was removed.                                                         // 23",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "Control whether a file is copied.                                            // 24\n                                       Passed the file object from the                                              // 25\n                                       VelocityTestFiles collection which                                           // 26\n                                       has a `absolutePath` field.                                                  // 27\n                                       Default: true                                                                // 28",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "A function that converts the                                // 29\n                                                        test file path to the mirror path.                          // 30\n                                                                                                                    // 31",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "type": "// 196!~YUIDOC_LINE~!     _reset(_config);                                                                                                 // 197!~YUIDOC_LINE~!",
            "access": "private",
            "tagname": "// 982\n/                                                                                                                  // 983\n function _symlinkPackagesDirIfPresent () {                                                                           // 984\n   var packagesDir = path.join(process.env.PWD, 'packages'),                                                          // 985\n       mirrorPackagesDir = path.join(Velocity.getMirrorPath(), 'packages');                                           // 986\n                                                                                                                      // 987\n   if (fs.existsSync(packagesDir) && !fs.existsSync(mirrorPackagesDir)) {                                             // 988\n     fs.symlinkSync(packagesDir, mirrorPackagesDir);                                                                  // 989\n   }                                                                                                                  // 990\n                                                                                                                      // 991\n }                                                                                                                    // 992\n                                                                                                                      // 993\n})();                                                                                                                  // 994\n                                                                                                                      // 995\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/velocity:core/lib/FileCopier.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n'use strict';                                                                                                          // 1\n                                                                                                                      // 2\nvar _ = Npm.require('lodash');                                                                                         // 3\nvar path = Npm.require('path');                                                                                        // 4\nvar fs = Npm.require('fs-extra');                                                                                      // 5\nvar removeFile = Meteor.wrapAsync(fs.remove);                                                                          // 6\nvar copyFile = Meteor.wrapAsync(fs.copy);                                                                              // 7\n                                                                                                                      // 8\n/**                                                                                                                    // 9\nWorker that copies test files to the mirror reactively.                                                             // 10\n                                                                                                                    // 11",
            "is_constructor": 1,
            "example": [
                "                                                                                                            // 32\n    var fileCopier = new Velocity.FileCopier({                                                                      // 33\n      targetFramework: TEST_FRAMEWORK_NAME                                                                          // 34\n    });                                                                                                             // 35\n    fileCopier.start();                                                                                             // 36\n/                                                                                                                    // 37\nVelocity.FileCopier = function VelocityFileCopier(options) {                                                           // 38\n check(options, {                                                                                                     // 39\n   targetFramework: String,                                                                                           // 40\n   onFileAdded: Match.Optional(Function),                                                                             // 41\n   onFileChanged: Match.Optional(Function),                                                                           // 42\n   onFileRemoved: Match.Optional(Function),                                                                           // 43\n   shouldCopy: Match.Optional(Function),                                                                              // 44\n   convertTestPathToMirrorPath: Match.Optional(Function)                                                              // 45\n });                                                                                                                  // 46\n this.options = _.extend({                                                                                            // 47\n   onFileAdded: _.noop,                                                                                               // 48\n   onFileChanged: _.noop,                                                                                             // 49\n   onFileRemoved: _.noop,                                                                                             // 50\n   shouldCopy: function () { return true; },                                                                          // 51\n   convertTestPathToMirrorPath: this._defaultConvertTestPathToMirrorPath                                              // 52\n }, options);                                                                                                         // 53\n};                                                                                                                     // 54\n                                                                                                                      // 55\n_.extend(Velocity.FileCopier.prototype, {                                                                              // 56\n                                                                                                                      // 57\n /**                                                                                                                  // 58\nStarts copying files to the mirror.                                                                               // 59\n                                                                                                                  // 60"
            ],
            "memberof": "Velocity.FileCopier.prototype                                                                           // 85\n/                                                                                                                  // 86\n stop: function () {                                                                                                  // 87\n   this._observer.stop();                                                                                             // 88\n   this._observer = null;                                                                                             // 89\n },                                                                                                                   // 90\n                                                                                                                      // 91\n _onFileAdded: function (newFile) {                                                                                   // 92\n   if (this.options.shouldCopy(newFile)) {                                                                            // 93\n     this._replaceFileInMirror(newFile);                                                                              // 94\n     this.options.onFileAdded(newFile);                                                                               // 95\n   }                                                                                                                  // 96\n },                                                                                                                   // 97\n                                                                                                                      // 98\n _onFileChanged: function (newFile, oldFile) {                                                                        // 99\n   if (this.options.shouldCopy(oldFile)) {                                                                            // 100\n     // Remove the oldFile in case the absolutePath has changed                                                       // 101\n     this._removeFileFromMirror(oldFile);                                                                             // 102\n   }                                                                                                                  // 103\n   if (this.options.shouldCopy(newFile)) {                                                                            // 104\n     this._replaceFileInMirror(newFile);                                                                              // 105\n     this.options.onFileAdded(oldFile, newFile);                                                                      // 106\n   }                                                                                                                  // 107\n },                                                                                                                   // 108\n                                                                                                                      // 109\n _onFileRemoved: function (removedFile) {                                                                             // 110\n   this._removeFileFromMirror(removedFile);                                                                           // 111\n   this.options.onFileRemoved(removedFile);                                                                           // 112\n },                                                                                                                   // 113\n                                                                                                                      // 114\n _removeFileFromMirror: function (file) {                                                                             // 115\n   var mirrorFilePath = this._convertTestPathToMirrorPath(file.absolutePath);                                         // 116\n   DEBUG && console.log('[Velocity.FileCopier] Remove file from mirror', mirrorFilePath);                             // 117\n   removeFile(mirrorFilePath);                                                                                        // 118\n },                                                                                                                   // 119\n                                                                                                                      // 120\n _replaceFileInMirror: function (file) {                                                                              // 121\n   var self = this;                                                                                                   // 122\n                                                                                                                      // 123\n   var mirrorFilePath = self._convertTestPathToMirrorPath(file.absolutePath);                                         // 124\n   DEBUG && console.log('[Velocity.FileCopier] Replace file in mirror', mirrorFilePath);                              // 125\n   copyFile(file.absolutePath, mirrorFilePath);                                                                       // 126\n },                                                                                                                   // 127\n                                                                                                                      // 128\n _isInTestsPath: function _isInTestsPath(filePath) {                                                                  // 129\n   var testsPath = Velocity.getTestsPath();                                                                           // 130\n   return filePath.substr(0, testsPath.length) === testsPath;                                                         // 131\n },                                                                                                                   // 132\n                                                                                                                      // 133\n _convertTestPathToMirrorPath: function (filePath) {                                                                  // 134\n   if (!this._isInTestsPath(filePath)) {                                                                              // 135\n     throw new Error('[Velocity.FileCopier] Path \"' + filePath + '\" is not in the tests path.');                      // 136\n   }                                                                                                                  // 137\n                                                                                                                      // 138\n   filePath = filePath.substr(Velocity.getTestsPath().length);                                                        // 139\n   filePath = this.options.convertTestPathToMirrorPath.call(this, filePath);                                          // 140\n                                                                                                                      // 141\n   return Velocity.getMirrorPath() + filePath;                                                                        // 142\n },                                                                                                                   // 143\n                                                                                                                      // 144\n _defaultConvertTestPathToMirrorPath: function (filePath) {                                                           // 145\n   var targetFramework = this.options.targetFramework;                                                                // 146\n   filePath = filePath.replace(targetFramework + '/client', 'client/' + targetFramework);                             // 147\n   filePath = filePath.replace(targetFramework + '/server', 'server/' + targetFramework);                             // 148\n                                                                                                                      // 149\n   return filePath                                                                                                    // 150\n }                                                                                                                    // 151\n});                                                                                                                    // 152\n                                                                                                                      // 153\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);"
        },
        "Velocity": {
            "name": "Velocity",
            "submodules": {},
            "classes": {
                "Velocity": 1,
                "Meteor.methods": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "core.js",
            "line": 183
        }
    },
    "classes": {
        "Velocity                                                                                                     // 21\n/                                                                                                                    // 22\nVelocity = {};                                                                                                         // 23\n                                                                                                                      // 24\n(function () {                                                                                                         // 25\n 'use strict';                                                                                                        // 26\n                                                                                                                      // 27\n//////////////////////////////////////////////////////////////////////                                                 // 28\n// Init                                                                                                                // 29\n//                                                                                                                     // 30\n                                                                                                                      // 31\n if (process.env.NODE_ENV !== 'development' ||                                                                        // 32\n     process.env.VELOCITY === '0' ||                                                                                  // 33\n     process.env.IS_MIRROR) {                                                                                         // 34\n   DEBUG && console.log('[velocity] ' + (process.env.IS_MIRROR ? 'Mirror detected -' : '') + 'Not adding velocity core');\n   return;                                                                                                            // 36\n }                                                                                                                    // 37\n                                                                                                                      // 38\n var getAssetPath = function (packageName, fileName) {                                                                // 39\n   var serverAssetsPath = path.join(                                                                                  // 40\n     findAppDir(), '.meteor', 'local', 'build', 'programs', 'server', 'assets'                                        // 41\n   );                                                                                                                 // 42\n                                                                                                                      // 43\n   packageName = packageName.replace(':', '_');                                                                       // 44\n                                                                                                                      // 45\n   return path.join(serverAssetsPath, 'packages', packageName, fileName);                                             // 46\n };                                                                                                                   // 47\n                                                                                                                      // 48\n var _ = Npm.require('lodash'),                                                                                       // 49\n     fs = Npm.require('fs'),                                                                                          // 50\n     fse = Npm.require('fs-extra'),                                                                                   // 51\n     outputFile = Meteor.wrapAsync(fse.outputFile),                                                                   // 52\n     copyFile = Meteor.wrapAsync(fse.copy),                                                                           // 53\n     path = Npm.require('path'),                                                                                      // 54\n     url = Npm.require('url'),                                                                                        // 55\n     Rsync = Npm.require('rsync'),                                                                                    // 56\n     child_process = Npm.require('child_process'),                                                                    // 57\n     chokidar = Npm.require('chokidar'),                                                                              // 58\n     mkdirp = Npm.require('mkdirp'),                                                                                  // 59\n     _config = {},                                                                                                    // 60\n     _preProcessors = [],                                                                                             // 61\n     _postProcessors = [],                                                                                            // 62\n     _watcher,                                                                                                        // 63\n     FIXTURE_REG_EXP = new RegExp('-fixture.(js|coffee)$'),                                                           // 64\n     DEFAULT_FIXTURE_PATH = getAssetPath('velocity:core', 'default-fixture.js'),                                      // 65\n     MIRROR_PID_VAR_TEMPLATE = 'mirror.@PORT.pid';                                                                    // 66\n                                                                                                                      // 67\n Meteor.startup(function initializeVelocity () {                                                                      // 68\n   DEBUG && console.log('[velocity] app dir', Velocity.getAppPath());                                                 // 69\n   DEBUG && console.log('velocity config =', JSON.stringify(_config, null, 2));                                       // 70\n                                                                                                                      // 71\n   // kick-off everything                                                                                             // 72\n   _reset(_config);                                                                                                   // 73\n });                                                                                                                  // 74\n                                                                                                                      // 75\n//////////////////////////////////////////////////////////////////////                                                 // 76\n// Public Methods                                                                                                      // 77\n//                                                                                                                     // 78\n                                                                                                                      // 79\n _.extend(Velocity, {                                                                                                 // 80\n                                                                                                                      // 81\n   /**                                                                                                                // 82\nGet application directory path.                                                                                 // 83\n                                                                                                                // 84": {
            "name": "Velocity                                                                                                     // 21\n/                                                                                                                    // 22\nVelocity = {};                                                                                                         // 23\n                                                                                                                      // 24\n(function () {                                                                                                         // 25\n 'use strict';                                                                                                        // 26\n                                                                                                                      // 27\n//////////////////////////////////////////////////////////////////////                                                 // 28\n// Init                                                                                                                // 29\n//                                                                                                                     // 30\n                                                                                                                      // 31\n if (process.env.NODE_ENV !== 'development' ||                                                                        // 32\n     process.env.VELOCITY === '0' ||                                                                                  // 33\n     process.env.IS_MIRROR) {                                                                                         // 34\n   DEBUG && console.log('[velocity] ' + (process.env.IS_MIRROR ? 'Mirror detected -' : '') + 'Not adding velocity core');\n   return;                                                                                                            // 36\n }                                                                                                                    // 37\n                                                                                                                      // 38\n var getAssetPath = function (packageName, fileName) {                                                                // 39\n   var serverAssetsPath = path.join(                                                                                  // 40\n     findAppDir(), '.meteor', 'local', 'build', 'programs', 'server', 'assets'                                        // 41\n   );                                                                                                                 // 42\n                                                                                                                      // 43\n   packageName = packageName.replace(':', '_');                                                                       // 44\n                                                                                                                      // 45\n   return path.join(serverAssetsPath, 'packages', packageName, fileName);                                             // 46\n };                                                                                                                   // 47\n                                                                                                                      // 48\n var _ = Npm.require('lodash'),                                                                                       // 49\n     fs = Npm.require('fs'),                                                                                          // 50\n     fse = Npm.require('fs-extra'),                                                                                   // 51\n     outputFile = Meteor.wrapAsync(fse.outputFile),                                                                   // 52\n     copyFile = Meteor.wrapAsync(fse.copy),                                                                           // 53\n     path = Npm.require('path'),                                                                                      // 54\n     url = Npm.require('url'),                                                                                        // 55\n     Rsync = Npm.require('rsync'),                                                                                    // 56\n     child_process = Npm.require('child_process'),                                                                    // 57\n     chokidar = Npm.require('chokidar'),                                                                              // 58\n     mkdirp = Npm.require('mkdirp'),                                                                                  // 59\n     _config = {},                                                                                                    // 60\n     _preProcessors = [],                                                                                             // 61\n     _postProcessors = [],                                                                                            // 62\n     _watcher,                                                                                                        // 63\n     FIXTURE_REG_EXP = new RegExp('-fixture.(js|coffee)$'),                                                           // 64\n     DEFAULT_FIXTURE_PATH = getAssetPath('velocity:core', 'default-fixture.js'),                                      // 65\n     MIRROR_PID_VAR_TEMPLATE = 'mirror.@PORT.pid';                                                                    // 66\n                                                                                                                      // 67\n Meteor.startup(function initializeVelocity () {                                                                      // 68\n   DEBUG && console.log('[velocity] app dir', Velocity.getAppPath());                                                 // 69\n   DEBUG && console.log('velocity config =', JSON.stringify(_config, null, 2));                                       // 70\n                                                                                                                      // 71\n   // kick-off everything                                                                                             // 72\n   _reset(_config);                                                                                                   // 73\n });                                                                                                                  // 74\n                                                                                                                      // 75\n//////////////////////////////////////////////////////////////////////                                                 // 76\n// Public Methods                                                                                                      // 77\n//                                                                                                                     // 78\n                                                                                                                      // 79\n _.extend(Velocity, {                                                                                                 // 80\n                                                                                                                      // 81\n   /**                                                                                                                // 82\nGet application directory path.                                                                                 // 83\n                                                                                                                // 84",
            "shortname": "Velocity                                                                                                     // 21\n/                                                                                                                    // 22\nVelocity = {};                                                                                                         // 23\n                                                                                                                      // 24\n(function () {                                                                                                         // 25\n 'use strict';                                                                                                        // 26\n                                                                                                                      // 27\n//////////////////////////////////////////////////////////////////////                                                 // 28\n// Init                                                                                                                // 29\n//                                                                                                                     // 30\n                                                                                                                      // 31\n if (process.env.NODE_ENV !== 'development' ||                                                                        // 32\n     process.env.VELOCITY === '0' ||                                                                                  // 33\n     process.env.IS_MIRROR) {                                                                                         // 34\n   DEBUG && console.log('[velocity] ' + (process.env.IS_MIRROR ? 'Mirror detected -' : '') + 'Not adding velocity core');\n   return;                                                                                                            // 36\n }                                                                                                                    // 37\n                                                                                                                      // 38\n var getAssetPath = function (packageName, fileName) {                                                                // 39\n   var serverAssetsPath = path.join(                                                                                  // 40\n     findAppDir(), '.meteor', 'local', 'build', 'programs', 'server', 'assets'                                        // 41\n   );                                                                                                                 // 42\n                                                                                                                      // 43\n   packageName = packageName.replace(':', '_');                                                                       // 44\n                                                                                                                      // 45\n   return path.join(serverAssetsPath, 'packages', packageName, fileName);                                             // 46\n };                                                                                                                   // 47\n                                                                                                                      // 48\n var _ = Npm.require('lodash'),                                                                                       // 49\n     fs = Npm.require('fs'),                                                                                          // 50\n     fse = Npm.require('fs-extra'),                                                                                   // 51\n     outputFile = Meteor.wrapAsync(fse.outputFile),                                                                   // 52\n     copyFile = Meteor.wrapAsync(fse.copy),                                                                           // 53\n     path = Npm.require('path'),                                                                                      // 54\n     url = Npm.require('url'),                                                                                        // 55\n     Rsync = Npm.require('rsync'),                                                                                    // 56\n     child_process = Npm.require('child_process'),                                                                    // 57\n     chokidar = Npm.require('chokidar'),                                                                              // 58\n     mkdirp = Npm.require('mkdirp'),                                                                                  // 59\n     _config = {},                                                                                                    // 60\n     _preProcessors = [],                                                                                             // 61\n     _postProcessors = [],                                                                                            // 62\n     _watcher,                                                                                                        // 63\n     FIXTURE_REG_EXP = new RegExp('-fixture.(js|coffee)$'),                                                           // 64\n     DEFAULT_FIXTURE_PATH = getAssetPath('velocity:core', 'default-fixture.js'),                                      // 65\n     MIRROR_PID_VAR_TEMPLATE = 'mirror.@PORT.pid';                                                                    // 66\n                                                                                                                      // 67\n Meteor.startup(function initializeVelocity () {                                                                      // 68\n   DEBUG && console.log('[velocity] app dir', Velocity.getAppPath());                                                 // 69\n   DEBUG && console.log('velocity config =', JSON.stringify(_config, null, 2));                                       // 70\n                                                                                                                      // 71\n   // kick-off everything                                                                                             // 72\n   _reset(_config);                                                                                                   // 73\n });                                                                                                                  // 74\n                                                                                                                      // 75\n//////////////////////////////////////////////////////////////////////                                                 // 76\n// Public Methods                                                                                                      // 77\n//                                                                                                                     // 78\n                                                                                                                      // 79\n _.extend(Velocity, {                                                                                                 // 80\n                                                                                                                      // 81\n   /**                                                                                                                // 82\nGet application directory path.                                                                                 // 83\n                                                                                                                // 84",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Velocity                                                                                                    // 10\n/                                                                                                                    // 11\n/**                                                                                                                    // 12\nThe `Velocity` object provides a common API for test frameworks to report                                           // 13\ntest results.  Frameworks can also request assets, such as a copy of the                                            // 14\nuser's application (the 'mirror') in which tests can be safely run without                                          // 15\nimpacting on-going development.                                                                                     // 16\n                                                                                                                    // 17\nTest results and log activity are reported via                                                                      // 18\n{{#crossLink \"Meteor.methods\"}}Meteor methods{{/crossLink}}.                                                        // 19\n                                                                                                                    // 20",
            "namespace": "",
            "file": ".build.velocity:core/os.osx.x86_64/packages/velocity:core.js",
            "line": 81,
            "description": "Copied from Meteor tools/files.js.                                                                                  // 2\n                                                                                                                    // 3\nIncludes:                                                                                                           // 4\n- Helper to find the app root path                                                                                  // 5\n/                                                                                                                    // 6\n                                                                                                                      // 7\nvar path = Npm.require('path');                                                                                        // 8\nvar fs = Npm.require('fs');                                                                                            // 9\n                                                                                                                      // 10\n// given a predicate function and a starting path, traverse upwards                                                    // 11\n// from the path until we find a path that satisfies the predicate.                                                    // 12\n//                                                                                                                     // 13\n// returns either the path to the lowest level directory that passed                                                   // 14\n// the test or null for none found. if starting path isn't given, use                                                  // 15\n// cwd.                                                                                                                // 16\nvar findUpwards = function (predicate, startPath) {                                                                    // 17\n var testDir = startPath || process.cwd();                                                                            // 18\n while (testDir) {                                                                                                    // 19\n   if (predicate(testDir)) {                                                                                          // 20\n     break;                                                                                                           // 21\n   }                                                                                                                  // 22\n   var newDir = path.dirname(testDir);                                                                                // 23\n   if (newDir === testDir) {                                                                                          // 24\n     testDir = null;                                                                                                  // 25\n   } else {                                                                                                           // 26\n     testDir = newDir;                                                                                                // 27\n   }                                                                                                                  // 28\n }                                                                                                                    // 29\n if (!testDir)                                                                                                        // 30\n   return null;                                                                                                       // 31\n                                                                                                                      // 32\n return testDir;                                                                                                      // 33\n};                                                                                                                     // 34\n                                                                                                                      // 35\n// Determine if 'filepath' (a path, or omit for cwd) is within an app                                                  // 36\n// directory. If so, return the top-level app directory.                                                               // 37\nfindAppDir = function (filepath) {                                                                                     // 38\n var isAppDir = function (filepath) {                                                                                 // 39\n   // XXX once we are done with the transition to engine, this should                                                 // 40\n   // change to: `return fs.existsSync(path.join(filepath, '.meteor',                                                 // 41\n   // 'release'))`                                                                                                    // 42\n                                                                                                                      // 43\n   // .meteor/packages can be a directory, if .meteor is a warehouse                                                  // 44\n   // directory.  since installing meteor initializes a warehouse at                                                  // 45\n   // $HOME/.meteor, we want to make sure your home directory (and all                                                // 46\n   // subdirectories therein) don't count as being within a meteor app.                                               // 47\n   try { // use try/catch to avoid the additional syscall to fs.existsSync                                            // 48\n     return fs.statSync(path.join(filepath, '.meteor', 'packages')).isFile();                                         // 49\n   } catch (e) {                                                                                                      // 50\n     return false;                                                                                                    // 51\n   }                                                                                                                  // 52\n };                                                                                                                   // 53\n                                                                                                                      // 54\n return findUpwards(isAppDir, filepath);                                                                              // 55\n};                                                                                                                     // 56\n                                                                                                                      // 57\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/velocity:core/core.js                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/*jshint -W117, -W030, -W016 */                                                                                        // 1\n/* global                                                                                                              // 2\nVelocity:true,                                                                                                        // 3\nDEBUG:true                                                                                                            // 4\n/                                                                                                                    // 5\n                                                                                                                      // 6\nDEBUG = !!process.env.VELOCITY_DEBUG;                                                                                  // 7\n                                                                                                                      // 8\n/**                                                                                                                    // 9"
        },
        "Meteor.methods                                                                                             // 187\n/                                                                                                                  // 188\n Meteor.methods({                                                                                                     // 189\n                                                                                                                      // 190\n   /**                                                                                                                // 191\nRe-init file watcher and clear all test results.                                                                // 192\n                                                                                                                // 193": {
            "name": "registerTestingFramework                                                                              // 153",
            "shortname": "Meteor.methods                                                                                             // 187\n/                                                                                                                  // 188\n Meteor.methods({                                                                                                     // 189\n                                                                                                                      // 190\n   /**                                                                                                                // 191\nRe-init file watcher and clear all test results.                                                                // 192\n                                                                                                                // 193",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Velocity                                                                                                    // 10\n/                                                                                                                    // 11\n/**                                                                                                                    // 12\nThe `Velocity` object provides a common API for test frameworks to report                                           // 13\ntest results.  Frameworks can also request assets, such as a copy of the                                            // 14\nuser's application (the 'mirror') in which tests can be safely run without                                          // 15\nimpacting on-going development.                                                                                     // 16\n                                                                                                                    // 17\nTest results and log activity are reported via                                                                      // 18\n{{#crossLink \"Meteor.methods\"}}Meteor methods{{/crossLink}}.                                                        // 19\n                                                                                                                    // 20",
            "namespace": "",
            "file": ".build326888..build.velocity:core/os.osx.x86_64/packages/velocity:core.js",
            "line": 81,
            "description": "Copied from Meteor tools/files.js.                                                                                  // 2\n                                                                                                                    // 3\nIncludes:                                                                                                           // 4\n- Helper to find the app root path                                                                                  // 5\n/                                                                                                                    // 6\n                                                                                                                      // 7\nvar path = Npm.require('path');                                                                                        // 8\nvar fs = Npm.require('fs');                                                                                            // 9\n                                                                                                                      // 10\n// given a predicate function and a starting path, traverse upwards                                                    // 11\n// from the path until we find a path that satisfies the predicate.                                                    // 12\n//                                                                                                                     // 13\n// returns either the path to the lowest level directory that passed                                                   // 14\n// the test or null for none found. if starting path isn't given, use                                                  // 15\n// cwd.                                                                                                                // 16\nvar findUpwards = function (predicate, startPath) {                                                                    // 17\n var testDir = startPath || process.cwd();                                                                            // 18\n while (testDir) {                                                                                                    // 19\n   if (predicate(testDir)) {                                                                                          // 20\n     break;                                                                                                           // 21\n   }                                                                                                                  // 22\n   var newDir = path.dirname(testDir);                                                                                // 23\n   if (newDir === testDir) {                                                                                          // 24\n     testDir = null;                                                                                                  // 25\n   } else {                                                                                                           // 26\n     testDir = newDir;                                                                                                // 27\n   }                                                                                                                  // 28\n }                                                                                                                    // 29\n if (!testDir)                                                                                                        // 30\n   return null;                                                                                                       // 31\n                                                                                                                      // 32\n return testDir;                                                                                                      // 33\n};                                                                                                                     // 34\n                                                                                                                      // 35\n// Determine if 'filepath' (a path, or omit for cwd) is within an app                                                  // 36\n// directory. If so, return the top-level app directory.                                                               // 37\nfindAppDir = function (filepath) {                                                                                     // 38\n var isAppDir = function (filepath) {                                                                                 // 39\n   // XXX once we are done with the transition to engine, this should                                                 // 40\n   // change to: `return fs.existsSync(path.join(filepath, '.meteor',                                                 // 41\n   // 'release'))`                                                                                                    // 42\n                                                                                                                      // 43\n   // .meteor/packages can be a directory, if .meteor is a warehouse                                                  // 44\n   // directory.  since installing meteor initializes a warehouse at                                                  // 45\n   // $HOME/.meteor, we want to make sure your home directory (and all                                                // 46\n   // subdirectories therein) don't count as being within a meteor app.                                               // 47\n   try { // use try/catch to avoid the additional syscall to fs.existsSync                                            // 48\n     return fs.statSync(path.join(filepath, '.meteor', 'packages')).isFile();                                         // 49\n   } catch (e) {                                                                                                      // 50\n     return false;                                                                                                    // 51\n   }                                                                                                                  // 52\n };                                                                                                                   // 53\n                                                                                                                      // 54\n return findUpwards(isAppDir, filepath);                                                                              // 55\n};                                                                                                                     // 56\n                                                                                                                      // 57\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/velocity:core/core.js                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/*jshint -W117, -W030, -W016 */                                                                                        // 1\n/* global                                                                                                              // 2\nVelocity:true,                                                                                                        // 3\nDEBUG:true                                                                                                            // 4\n/                                                                                                                    // 5\n                                                                                                                      // 6\nDEBUG = !!process.env.VELOCITY_DEBUG;                                                                                  // 7\n                                                                                                                      // 8\n/**                                                                                                                    // 9",
            "itemtype": "method",
            "return": {
                "description": "message with bug repo url                                                                      // 140\n/                                                                                                                // 141\n   getReportGithubIssueMessage: function () {                                                                         // 142\n     return 'Please report the issue here: ' +                                                                        // 143\n       'https://github.com/meteor-velocity/velocity/issues';                                                          // 144\n   }                                                                                                                  // 145\n });                                                                                                                  // 146\n                                                                                                                      // 147\n if (Meteor.isServer) {                                                                                               // 148\n   _.extend(Velocity, {                                                                                               // 149\n     /**                                                                                                              // 150\nRegisters a testing framework plugin.                                                                         // 151\n                                                                                                              // 152",
                "type": "String"
            },
            "params": [
                {
                    "name": "preprocessor",
                    "description": "// 118\n/                                                                                                                // 119\n   addPreProcessor: function (preProcessor) {                                                                         // 120\n     _preProcessors.push(preProcessor);                                                                               // 121\n   },                                                                                                                 // 122\n                                                                                                                      // 123\n   /**                                                                                                                // 124\nAdd a callback which will execute after all tests have completed                                                // 125\nand after the aggregate test results have been reported.                                                        // 126\n                                                                                                                // 127",
                    "type": "Function"
                },
                {
                    "name": "reporter",
                    "description": "// 129\n/                                                                                                                // 130\n   addPostProcessor: function (reporter) {                                                                            // 131\n     _postProcessors.push(reporter);                                                                                  // 132\n   },                                                                                                                 // 133\n                                                                                                                      // 134\n   /**                                                                                                                // 135\nGet a message that displays where bugs in Velocity core itself should                                           // 136\nbe reported.                                                                                                    // 137\n                                                                                                                // 138",
                    "type": "Function"
                },
                {
                    "name": "name",
                    "description": "The name of the testing framework.                                 // 154",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options for the testing framework.                                 // 155",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "disableAutoReset",
                            "description": "Velocity's reset cycle will skip reports and logs for this framework\n                                           It will be the responsibility of the framework to clean up its ****!",
                            "type": "String"
                        },
                        {
                            "name": "regex",
                            "description": "The regular expression for test files that should be assigned      // 158\n                                           to the testing framework.                                          // 159\n                                           The path relative to the tests                                     // 160\n                                           folder is matched against it.                                      // 161\n                                           The default is \"name/.+\\.js$\"                                      // 162\n                                           (name is the testing framework name).                              // 163",
                            "type": "String"
                        },
                        {
                            "name": "sampleTestGenerator",
                            "description": "sampleTestGenerator                                             // 164\n   returns an array of fileObjects with the following fields:                                                 // 165",
                            "type": "Function",
                            "props": [
                                {
                                    "name": "path",
                                    "description": "relative path to place test file (from PROJECT/tests)        // 166",
                                    "type": "String"
                                },
                                {
                                    "name": "contents",
                                    "description": "contents of the test file the path that's returned       // 167\n/                                                                                                              // 168\n     registerTestingFramework: function (name, options) {                                                             // 169\n       _config[name] = _parseTestingFrameworkOptions(name, options);                                                  // 170\n                                                                                                                      // 171\n       // make sure the appropriate aggregate records are added                                                       // 172\n       _reset(_config);                                                                                               // 173\n     }                                                                                                                // 174\n   });                                                                                                                // 175\n }                                                                                                                    // 176\n                                                                                                                      // 177\n                                                                                                                      // 178\n//////////////////////////////////////////////////////////////////////                                                 // 179\n// Meteor Methods                                                                                                      // 180\n//                                                                                                                     // 181\n                                                                                                                      // 182\n /**                                                                                                                  // 183\nMost communication with Velocity core is done via the following                                                   // 184\nMeteor methods.                                                                                                   // 185\n                                                                                                                  // 186",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "// 204",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "",
                            "description": "The name of a specific framework                                            // 205\n                 to clear results for.  Ex. 'jasmine' or 'mocha'                                                // 206",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "A list of test Ids which should be kept                                          // 207\n                               (not cleared).  These Ids must match the                                         // 208\n                               ones passed to `velocity/reports/submit`.                                        // 209\n/                                                                                                                // 210\n   'velocity/reports/reset': function (options) {                                                                     // 211\n     options = options || {};                                                                                         // 212\n     check(options, {                                                                                                 // 213\n       framework: Match.Optional(String),                                                                             // 214\n       notIn: Match.Optional([String])                                                                                // 215\n     });                                                                                                              // 216\n                                                                                                                      // 217\n     var query = {};                                                                                                  // 218\n     if (options.framework) {                                                                                         // 219\n       query.framework = options.framework;                                                                           // 220\n     }                                                                                                                // 221\n     if (options.notIn) {                                                                                             // 222\n       query = _.assign(query, {_id: {$nin: options.notIn}});                                                         // 223\n     }                                                                                                                // 224\n     VelocityTestReports.remove(query);                                                                               // 225\n     _updateAggregateReports();                                                                                       // 226\n   },                                                                                                                 // 227\n                                                                                                                      // 228\n                                                                                                                      // 229\n   /**                                                                                                                // 230\nClear all log entries.                                                                                          // 231\n                                                                                                                // 232",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "// 234",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "",
                            "description": "The name of a specific framework                                            // 235\n                                    to clear logs for.                                                          // 236\n/                                                                                                                // 237\n   'velocity/logs/reset': function (options) {                                                                        // 238\n     options = options || {};                                                                                         // 239\n     check(options, {                                                                                                 // 240\n       framework: Match.Optional(String)                                                                              // 241\n     });                                                                                                              // 242\n                                                                                                                      // 243\n     var query = {};                                                                                                  // 244\n     if (options.framework) {                                                                                         // 245\n       query.framework = options.framework;                                                                           // 246\n     }                                                                                                                // 247\n     VelocityLogs.remove(query);                                                                                      // 248\n   },                                                                                                                 // 249\n                                                                                                                      // 250\n                                                                                                                      // 251\n   /**                                                                                                                // 252\nLog a message to the Velocity log store.  This provides a central                                               // 253\nlocation for different reporters to query for test framework log                                                // 254\nentries.                                                                                                        // 255\n                                                                                                                // 256",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "// 258",
                    "type": "Object",
                    "props": [
                        {
                            "name": "",
                            "description": "The name of the test framework                                                // 259",
                            "type": "String"
                        },
                        {
                            "name": "",
                            "description": "The message to log                                                              // 260",
                            "type": "String"
                        },
                        {
                            "name": "",
                            "description": "Log level.  Ex. 'error'. Default: 'info'                                        // 261",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "// 262\n/                                                                                                                // 263\n   'velocity/logs/submit': function (options) {                                                                       // 264\n     check(options, {                                                                                                 // 265\n       framework: String,                                                                                             // 266\n       message: String,                                                                                               // 267\n       level: Match.Optional(String),                                                                                 // 268\n       timestamp: Match.Optional(Match.OneOf(Date, String))                                                           // 269\n     });                                                                                                              // 270\n                                                                                                                      // 271\n     VelocityLogs.insert({                                                                                            // 272\n       timestamp: options.timestamp || new Date(),                                                                    // 273\n       level: options.level || 'info',                                                                                // 274\n       message: options.message,                                                                                      // 275\n       framework: options.framework                                                                                   // 276\n     });                                                                                                              // 277\n   },                                                                                                                 // 278\n                                                                                                                      // 279\n                                                                                                                      // 280\n   /**                                                                                                                // 281\nRecord the results of an individual test run; a simple collector of                                             // 282\ntest data.                                                                                                      // 283\n                                                                                                                // 284\nThe `data` object is stored in its entirety; any field may be passed in.                                        // 285\nThe optional fields documented here are suggestions based on what the                                           // 286\nstandard html-reporter supports.  Whether or not a field is actually                                            // 287\nused is up to the specific test reporter that the user has installed.                                           // 288\n                                                                                                                // 289",
                            "type": "Date",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "data",
                    "description": "// 291",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "Name of the test that was executed.                                                   // 292",
                            "type": "String"
                        },
                        {
                            "name": "framework",
                            "description": "Name of a testing framework.                                                     // 293\n                               For example, 'jasmine' or 'mocha'.                                               // 294",
                            "type": "String"
                        },
                        {
                            "name": "result",
                            "description": "The results of the test.  Standard values                                           // 295\n                            are 'passed' and 'failed'.  Different test                                          // 296\n                            reporters can support other values.  For                                            // 297\n                            example, the aggregate tests collection uses                                        // 298\n                            'pending' to indicate that results are still                                        // 299\n                            coming in.                                                                          // 300",
                            "type": "String"
                        },
                        {
                            "name": "id",
                            "description": "Used to update a specific test result.  If not                                        // 301\n                          provided, frameworks can use the                                                      // 302\n                          `velocity/reports/reset` Meteor method to                                             // 303\n                          clear all tests.                                                                      // 304",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "ancestors",
                            "description": "The hierarchy of suites and blocks above                                        // 305\n                                this test. For example,                                                         // 306\n                             ['Template', 'leaderboard', 'selected_name']                                       // 307",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "timestamp",
                            "description": "The time that the test started for this                                          // 308\n                               result.                                                                          // 309",
                            "type": "Date",
                            "optional": true
                        },
                        {
                            "name": "duration",
                            "description": "The test duration in milliseconds.                                              // 310",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "browser",
                            "description": "Which browser did the test run in?                                               // 311",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "failureType",
                            "description": "For example, 'expect' or 'assert'                                            // 312",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "failureMessage",
                            "description": "// 313",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "failureStackTrace",
                            "description": "The stack trace associated with                                        // 314\n                                         the failure                                                            // 315\n/                                                                                                                // 316\n   'velocity/reports/submit': function (data) {                                                                       // 317\n     check(data, Match.ObjectIncluding({                                                                              // 318\n       name: String,                                                                                                  // 319\n       framework: String,                                                                                             // 320\n       result: String,                                                                                                // 321\n       id: Match.Optional(String),                                                                                    // 322\n       ancestors: Match.Optional([String]),                                                                           // 323\n       timestamp: Match.Optional(Match.OneOf(Date, String)),                                                          // 324\n       duration: Match.Optional(Number),                                                                              // 325\n       browser: Match.Optional(String),                                                                               // 326\n       failureType: Match.Optional(String),                                                                           // 327\n       failureMessage: Match.Optional(String),                                                                        // 328\n       failureStackTrace: Match.Optional(Match.Any)                                                                   // 329\n     }));                                                                                                             // 330\n                                                                                                                      // 331\n     data.timestamp = data.timestamp || new Date();                                                                   // 332\n     data.id = data.id || Random.id();                                                                                // 333\n                                                                                                                      // 334\n     VelocityTestReports.upsert(data.id, {$set: data});                                                               // 335\n                                                                                                                      // 336\n     _updateAggregateReports();                                                                                       // 337\n   },  // end postResult                                                                                              // 338\n                                                                                                                      // 339\n                                                                                                                      // 340\n   /**                                                                                                                // 341\nFrameworks must call this method to inform Velocity they have completed                                         // 342\ntheir current test runs. Velocity uses this flag when running in CI mode.                                       // 343\n                                                                                                                // 344",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "data",
                    "description": "// 346",
                    "type": "Object",
                    "props": [
                        {
                            "name": "",
                            "description": "Name of a test framework.  Ex. 'jasmine'                                         // 347\n/                                                                                                                // 348\n   'velocity/reports/completed': function (data) {                                                                    // 349\n     check(data, {                                                                                                    // 350\n       framework: String                                                                                              // 351\n     });                                                                                                              // 352\n                                                                                                                      // 353\n     VelocityAggregateReports.upsert({'name': data.framework},                                                        // 354\n       {$set: {'result': 'completed'}});                                                                              // 355\n     _updateAggregateReports();                                                                                       // 356\n   },  // end completed                                                                                               // 357\n                                                                                                                      // 358\n                                                                                                                      // 359\n   /**                                                                                                                // 360\nCopy sample tests from frameworks `sample-tests` directories                                                    // 361\nto the user's application's `tests` directory.                                                                  // 362\n                                                                                                                // 363",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "// 366",
                    "type": "Object",
                    "props": [
                        {
                            "name": "",
                            "description": "Framework name. Ex. 'jasmine', 'mocha'                                        // 367\n/                                                                                                                // 368\n   'velocity/copySampleTests': function (options) {                                                                   // 369\n     var sampleTests,                                                                                                 // 370\n         samplesPath,                                                                                                 // 371\n         testsPath,                                                                                                   // 372\n         command;                                                                                                     // 373\n                                                                                                                      // 374\n     options = options || {};                                                                                         // 375\n     check(options, {                                                                                                 // 376\n       framework: String                                                                                              // 377\n     });                                                                                                              // 378\n                                                                                                                      // 379\n     if (_config[options.framework].sampleTestGenerator) {                                                            // 380\n                                                                                                                      // 381\n       sampleTests = _config[options.framework].sampleTestGenerator(options);                                         // 382\n                                                                                                                      // 383\n       DEBUG && console.log('[velocity] found ', sampleTests.length,                                                  // 384\n         'sample test files for', options.framework);                                                                 // 385\n                                                                                                                      // 386\n       sampleTests.forEach(function (testFile) {                                                                      // 387\n         var fullTestPath = path.join(Velocity.getTestsPath(), testFile.path);                                        // 388\n         var testDir = path.dirname(fullTestPath);                                                                    // 389\n         mkdirp.sync(testDir);                                                                                        // 390\n         fs.writeFileSync(fullTestPath, testFile.contents);                                                           // 391\n       });                                                                                                            // 392\n                                                                                                                      // 393\n     } else {                                                                                                         // 394\n                                                                                                                      // 395\n       samplesPath = path.join(Velocity.getAppPath(), 'packages',                                                     // 396\n         options.framework, 'sample-tests');                                                                          // 397\n       testsPath = Velocity.getTestsPath();                                                                           // 398\n                                                                                                                      // 399\n       DEBUG && console.log('[velocity] checking for sample tests in',                                                // 400\n         path.join(samplesPath, '*'));                                                                                // 401\n                                                                                                                      // 402\n       if (fs.existsSync(samplesPath)) {                                                                              // 403\n         command = 'mkdir -p ' + testsPath + ' && ' +                                                                 // 404\n         'rsync -au ' + path.join(samplesPath, '*') +                                                                 // 405\n         ' ' + testsPath + path.sep;                                                                                  // 406\n                                                                                                                      // 407\n         DEBUG && console.log('[velocity] copying sample tests (if any) ' +                                           // 408\n           'for framework', options.framework, '-',                                                                   // 409\n           command);                                                                                                  // 410\n                                                                                                                      // 411\n         child_process.exec(command, Meteor.bindEnvironment(                                                          // 412\n           function copySampleTestsExecHandler (err, stdout, stderr) {                                                // 413\n             if (err) {                                                                                               // 414\n               console.error('ERROR', err);                                                                           // 415\n             }                                                                                                        // 416\n             console.log(stdout);                                                                                     // 417\n             console.error(stderr);                                                                                   // 418\n           },                                                                                                         // 419\n           'copySampleTestsExecHandler'                                                                               // 420\n         ));                                                                                                          // 421\n       }                                                                                                              // 422\n                                                                                                                      // 423\n     }                                                                                                                // 424\n   },  // end copySampleTests                                                                                         // 425\n                                                                                                                      // 426\n                                                                                                                      // 427\n   /**                                                                                                                // 428\nStarts a new mirror if it has not already been started, and reuses an                                           // 429\nexisting one if it is already started.                                                                          // 430\n                                                                                                                // 431\nThis method will update the `VelocityMirrors` collection with `requestId`                                       // 432\nonce the mirror is ready for use.                                                                               // 433\n                                                                                                                // 434",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "Options for the mirror.                                                // 437",
                    "type": "Object",
                    "props": [
                        {
                            "name": "",
                            "description": "The name of the calling framework                                      // 438",
                            "type": "String"
                        },
                        {
                            "name": "",
                            "description": "Array of files with absolute paths                                     // 439",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "String use a specific port                                             // 440",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "Id for the mirror that may be used to query the mirror for status info // 441",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "Adds this string to the end of the root url in the VelocityMirrors collection.\n                                         eg. `/?jasmine=true`                                                   // 443\n                                         Request parameters that velocity-ci uses.                              // 444\n                                                                                                                // 445",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "Required fields:                                                                          // 533\n                  framework - String ex. 'mocha-web-1'                                                            // 534\n                  rootUrl - String ex. 'http://localhost:5000/x=y'                                                // 535\n                                                                                                                  // 536\n                Optional parameters:                                                                              // 537\n                  fixtureFiles - Array of files with absolute paths                                               // 538\n                  port - String use a specific port instead of finding the next available one                     // 539\n                                                                                                                  // 540",
                    "type": "Object",
                    "props": []
                },
                {
                    "name": "options",
                    "description": "Required fields:                                                                          // 585\n                  framework - String ex. 'mocha-web-1'                                                            // 586\n                  port - String the port the mirror that just started / was reused is using                       // 587\n                  requestId - the request id to put in the mirror metadata                                        // 588\n                                                                                                                  // 589",
                    "type": "Object",
                    "props": []
                },
                {
                    "name": "database",
                    "description": "// 687"
                },
                {
                    "name": "port",
                    "description": "Mirror port                                                                                           // 704"
                },
                {
                    "name": "fixtureFiles",
                    "description": "Array with fixture file paths.                                                                // 721"
                },
                {
                    "name": "url",
                    "description": "The target location                                                                           // 739",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Called with (error, result) where error is the exception and result is the status code // 740\n                                                                                                                  // 741",
                    "type": "Function"
                },
                {
                    "name": "config",
                    "description": "See `registerTestingFramework`.                                                           // 791",
                    "type": "Object"
                },
                {
                    "name": "config",
                    "description": "See `registerTestingFramework`.                                                           // 871",
                    "type": "Object"
                },
                {
                    "name": "force",
                    "description": "performs an rsync even if no mirrors have been requested                                             // 964"
                },
                {
                    "name": "options",
                    "description": "// 14",
                    "type": "Object",
                    "props": [
                        {
                            "name": "",
                            "description": "The name of the target framework                                            // 15\n                                        for which the tests should be copied                                        // 16\n                                        to the mirror.                                                              // 17",
                            "type": "String"
                        },
                        {
                            "name": "",
                            "description": "Callback that is called after a                                             // 18\n                                        file was added.                                                             // 19",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "Callback that is called after a                                           // 20\n                                          file has changed.                                                         // 21",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "Callback that is called after a                                           // 22\n                                          file was removed.                                                         // 23",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "Control whether a file is copied.                                            // 24\n                                       Passed the file object from the                                              // 25\n                                       VelocityTestFiles collection which                                           // 26\n                                       has a `absolutePath` field.                                                  // 27\n                                       Default: true                                                                // 28",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "A function that converts the                                // 29\n                                                        test file path to the mirror path.                          // 30\n                                                                                                                    // 31",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "FileCopier                                                                                                   // 12": {
            "name": "_symlinkPackagesDirIfPresent                                                                              // 1022",
            "shortname": "FileCopier                                                                                                   // 12",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Velocity                                                                                                    // 10\n/                                                                                                                    // 11\n/**                                                                                                                    // 12\nThe `Velocity` object provides a common API for test frameworks to report                                           // 13\ntest results.  Frameworks can also request assets, such as a copy of the                                            // 14\nuser's application (the 'mirror') in which tests can be safely run without                                          // 15\nimpacting on-going development.                                                                                     // 16\n                                                                                                                    // 17\nTest results and log activity are reported via                                                                      // 18\n{{#crossLink \"Meteor.methods\"}}Meteor methods{{/crossLink}}.                                                        // 19\n                                                                                                                    // 20",
            "namespace": "",
            "file": ".build326888..build.velocity:core/os.osx.x86_64/packages/velocity:core.js",
            "line": 81,
            "description": "Copied from Meteor tools/files.js.                                                                                  // 2\n                                                                                                                    // 3\nIncludes:                                                                                                           // 4\n- Helper to find the app root path                                                                                  // 5\n/                                                                                                                    // 6\n                                                                                                                      // 7\nvar path = Npm.require('path');                                                                                        // 8\nvar fs = Npm.require('fs');                                                                                            // 9\n                                                                                                                      // 10\n// given a predicate function and a starting path, traverse upwards                                                    // 11\n// from the path until we find a path that satisfies the predicate.                                                    // 12\n//                                                                                                                     // 13\n// returns either the path to the lowest level directory that passed                                                   // 14\n// the test or null for none found. if starting path isn't given, use                                                  // 15\n// cwd.                                                                                                                // 16\nvar findUpwards = function (predicate, startPath) {                                                                    // 17\n var testDir = startPath || process.cwd();                                                                            // 18\n while (testDir) {                                                                                                    // 19\n   if (predicate(testDir)) {                                                                                          // 20\n     break;                                                                                                           // 21\n   }                                                                                                                  // 22\n   var newDir = path.dirname(testDir);                                                                                // 23\n   if (newDir === testDir) {                                                                                          // 24\n     testDir = null;                                                                                                  // 25\n   } else {                                                                                                           // 26\n     testDir = newDir;                                                                                                // 27\n   }                                                                                                                  // 28\n }                                                                                                                    // 29\n if (!testDir)                                                                                                        // 30\n   return null;                                                                                                       // 31\n                                                                                                                      // 32\n return testDir;                                                                                                      // 33\n};                                                                                                                     // 34\n                                                                                                                      // 35\n// Determine if 'filepath' (a path, or omit for cwd) is within an app                                                  // 36\n// directory. If so, return the top-level app directory.                                                               // 37\nfindAppDir = function (filepath) {                                                                                     // 38\n var isAppDir = function (filepath) {                                                                                 // 39\n   // XXX once we are done with the transition to engine, this should                                                 // 40\n   // change to: `return fs.existsSync(path.join(filepath, '.meteor',                                                 // 41\n   // 'release'))`                                                                                                    // 42\n                                                                                                                      // 43\n   // .meteor/packages can be a directory, if .meteor is a warehouse                                                  // 44\n   // directory.  since installing meteor initializes a warehouse at                                                  // 45\n   // $HOME/.meteor, we want to make sure your home directory (and all                                                // 46\n   // subdirectories therein) don't count as being within a meteor app.                                               // 47\n   try { // use try/catch to avoid the additional syscall to fs.existsSync                                            // 48\n     return fs.statSync(path.join(filepath, '.meteor', 'packages')).isFile();                                         // 49\n   } catch (e) {                                                                                                      // 50\n     return false;                                                                                                    // 51\n   }                                                                                                                  // 52\n };                                                                                                                   // 53\n                                                                                                                      // 54\n return findUpwards(isAppDir, filepath);                                                                              // 55\n};                                                                                                                     // 56\n                                                                                                                      // 57\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/velocity:core/core.js                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/*jshint -W117, -W030, -W016 */                                                                                        // 1\n/* global                                                                                                              // 2\nVelocity:true,                                                                                                        // 3\nDEBUG:true                                                                                                            // 4\n/                                                                                                                    // 5\n                                                                                                                      // 6\nDEBUG = !!process.env.VELOCITY_DEBUG;                                                                                  // 7\n                                                                                                                      // 8\n/**                                                                                                                    // 9",
            "itemtype": "method",
            "return": {
                "description": "A future that can be used in meteor methods (or for other async needs)                           // 742",
                "type": "Future"
            },
            "params": [
                {
                    "name": "preprocessor",
                    "description": "// 118\n/                                                                                                                // 119\n   addPreProcessor: function (preProcessor) {                                                                         // 120\n     _preProcessors.push(preProcessor);                                                                               // 121\n   },                                                                                                                 // 122\n                                                                                                                      // 123\n   /**                                                                                                                // 124\nAdd a callback which will execute after all tests have completed                                                // 125\nand after the aggregate test results have been reported.                                                        // 126\n                                                                                                                // 127",
                    "type": "Function"
                },
                {
                    "name": "reporter",
                    "description": "// 129\n/                                                                                                                // 130\n   addPostProcessor: function (reporter) {                                                                            // 131\n     _postProcessors.push(reporter);                                                                                  // 132\n   },                                                                                                                 // 133\n                                                                                                                      // 134\n   /**                                                                                                                // 135\nGet a message that displays where bugs in Velocity core itself should                                           // 136\nbe reported.                                                                                                    // 137\n                                                                                                                // 138",
                    "type": "Function"
                },
                {
                    "name": "name",
                    "description": "The name of the testing framework.                                 // 154",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options for the testing framework.                                 // 155",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "disableAutoReset",
                            "description": "Velocity's reset cycle will skip reports and logs for this framework\n                                           It will be the responsibility of the framework to clean up its ****!",
                            "type": "String"
                        },
                        {
                            "name": "regex",
                            "description": "The regular expression for test files that should be assigned      // 158\n                                           to the testing framework.                                          // 159\n                                           The path relative to the tests                                     // 160\n                                           folder is matched against it.                                      // 161\n                                           The default is \"name/.+\\.js$\"                                      // 162\n                                           (name is the testing framework name).                              // 163",
                            "type": "String"
                        },
                        {
                            "name": "sampleTestGenerator",
                            "description": "sampleTestGenerator                                             // 164\n   returns an array of fileObjects with the following fields:                                                 // 165",
                            "type": "Function",
                            "props": [
                                {
                                    "name": "path",
                                    "description": "relative path to place test file (from PROJECT/tests)        // 166",
                                    "type": "String"
                                },
                                {
                                    "name": "contents",
                                    "description": "contents of the test file the path that's returned       // 167\n/                                                                                                              // 168\n     registerTestingFramework: function (name, options) {                                                             // 169\n       _config[name] = _parseTestingFrameworkOptions(name, options);                                                  // 170\n                                                                                                                      // 171\n       // make sure the appropriate aggregate records are added                                                       // 172\n       _reset(_config);                                                                                               // 173\n     }                                                                                                                // 174\n   });                                                                                                                // 175\n }                                                                                                                    // 176\n                                                                                                                      // 177\n                                                                                                                      // 178\n//////////////////////////////////////////////////////////////////////                                                 // 179\n// Meteor Methods                                                                                                      // 180\n//                                                                                                                     // 181\n                                                                                                                      // 182\n /**                                                                                                                  // 183\nMost communication with Velocity core is done via the following                                                   // 184\nMeteor methods.                                                                                                   // 185\n                                                                                                                  // 186",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "// 204",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "",
                            "description": "The name of a specific framework                                            // 205\n                 to clear results for.  Ex. 'jasmine' or 'mocha'                                                // 206",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "A list of test Ids which should be kept                                          // 207\n                               (not cleared).  These Ids must match the                                         // 208\n                               ones passed to `velocity/reports/submit`.                                        // 209\n/                                                                                                                // 210\n   'velocity/reports/reset': function (options) {                                                                     // 211\n     options = options || {};                                                                                         // 212\n     check(options, {                                                                                                 // 213\n       framework: Match.Optional(String),                                                                             // 214\n       notIn: Match.Optional([String])                                                                                // 215\n     });                                                                                                              // 216\n                                                                                                                      // 217\n     var query = {};                                                                                                  // 218\n     if (options.framework) {                                                                                         // 219\n       query.framework = options.framework;                                                                           // 220\n     }                                                                                                                // 221\n     if (options.notIn) {                                                                                             // 222\n       query = _.assign(query, {_id: {$nin: options.notIn}});                                                         // 223\n     }                                                                                                                // 224\n     VelocityTestReports.remove(query);                                                                               // 225\n     _updateAggregateReports();                                                                                       // 226\n   },                                                                                                                 // 227\n                                                                                                                      // 228\n                                                                                                                      // 229\n   /**                                                                                                                // 230\nClear all log entries.                                                                                          // 231\n                                                                                                                // 232",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "// 234",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "",
                            "description": "The name of a specific framework                                            // 235\n                                    to clear logs for.                                                          // 236\n/                                                                                                                // 237\n   'velocity/logs/reset': function (options) {                                                                        // 238\n     options = options || {};                                                                                         // 239\n     check(options, {                                                                                                 // 240\n       framework: Match.Optional(String)                                                                              // 241\n     });                                                                                                              // 242\n                                                                                                                      // 243\n     var query = {};                                                                                                  // 244\n     if (options.framework) {                                                                                         // 245\n       query.framework = options.framework;                                                                           // 246\n     }                                                                                                                // 247\n     VelocityLogs.remove(query);                                                                                      // 248\n   },                                                                                                                 // 249\n                                                                                                                      // 250\n                                                                                                                      // 251\n   /**                                                                                                                // 252\nLog a message to the Velocity log store.  This provides a central                                               // 253\nlocation for different reporters to query for test framework log                                                // 254\nentries.                                                                                                        // 255\n                                                                                                                // 256",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "// 258",
                    "type": "Object",
                    "props": [
                        {
                            "name": "",
                            "description": "The name of the test framework                                                // 259",
                            "type": "String"
                        },
                        {
                            "name": "",
                            "description": "The message to log                                                              // 260",
                            "type": "String"
                        },
                        {
                            "name": "",
                            "description": "Log level.  Ex. 'error'. Default: 'info'                                        // 261",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "// 262\n/                                                                                                                // 263\n   'velocity/logs/submit': function (options) {                                                                       // 264\n     check(options, {                                                                                                 // 265\n       framework: String,                                                                                             // 266\n       message: String,                                                                                               // 267\n       level: Match.Optional(String),                                                                                 // 268\n       timestamp: Match.Optional(Match.OneOf(Date, String))                                                           // 269\n     });                                                                                                              // 270\n                                                                                                                      // 271\n     VelocityLogs.insert({                                                                                            // 272\n       timestamp: options.timestamp || new Date(),                                                                    // 273\n       level: options.level || 'info',                                                                                // 274\n       message: options.message,                                                                                      // 275\n       framework: options.framework                                                                                   // 276\n     });                                                                                                              // 277\n   },                                                                                                                 // 278\n                                                                                                                      // 279\n                                                                                                                      // 280\n   /**                                                                                                                // 281\nRecord the results of an individual test run; a simple collector of                                             // 282\ntest data.                                                                                                      // 283\n                                                                                                                // 284\nThe `data` object is stored in its entirety; any field may be passed in.                                        // 285\nThe optional fields documented here are suggestions based on what the                                           // 286\nstandard html-reporter supports.  Whether or not a field is actually                                            // 287\nused is up to the specific test reporter that the user has installed.                                           // 288\n                                                                                                                // 289",
                            "type": "Date",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "data",
                    "description": "// 291",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "Name of the test that was executed.                                                   // 292",
                            "type": "String"
                        },
                        {
                            "name": "framework",
                            "description": "Name of a testing framework.                                                     // 293\n                               For example, 'jasmine' or 'mocha'.                                               // 294",
                            "type": "String"
                        },
                        {
                            "name": "result",
                            "description": "The results of the test.  Standard values                                           // 295\n                            are 'passed' and 'failed'.  Different test                                          // 296\n                            reporters can support other values.  For                                            // 297\n                            example, the aggregate tests collection uses                                        // 298\n                            'pending' to indicate that results are still                                        // 299\n                            coming in.                                                                          // 300",
                            "type": "String"
                        },
                        {
                            "name": "id",
                            "description": "Used to update a specific test result.  If not                                        // 301\n                          provided, frameworks can use the                                                      // 302\n                          `velocity/reports/reset` Meteor method to                                             // 303\n                          clear all tests.                                                                      // 304",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "ancestors",
                            "description": "The hierarchy of suites and blocks above                                        // 305\n                                this test. For example,                                                         // 306\n                             ['Template', 'leaderboard', 'selected_name']                                       // 307",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "timestamp",
                            "description": "The time that the test started for this                                          // 308\n                               result.                                                                          // 309",
                            "type": "Date",
                            "optional": true
                        },
                        {
                            "name": "duration",
                            "description": "The test duration in milliseconds.                                              // 310",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "browser",
                            "description": "Which browser did the test run in?                                               // 311",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "failureType",
                            "description": "For example, 'expect' or 'assert'                                            // 312",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "failureMessage",
                            "description": "// 313",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "failureStackTrace",
                            "description": "The stack trace associated with                                        // 314\n                                         the failure                                                            // 315\n/                                                                                                                // 316\n   'velocity/reports/submit': function (data) {                                                                       // 317\n     check(data, Match.ObjectIncluding({                                                                              // 318\n       name: String,                                                                                                  // 319\n       framework: String,                                                                                             // 320\n       result: String,                                                                                                // 321\n       id: Match.Optional(String),                                                                                    // 322\n       ancestors: Match.Optional([String]),                                                                           // 323\n       timestamp: Match.Optional(Match.OneOf(Date, String)),                                                          // 324\n       duration: Match.Optional(Number),                                                                              // 325\n       browser: Match.Optional(String),                                                                               // 326\n       failureType: Match.Optional(String),                                                                           // 327\n       failureMessage: Match.Optional(String),                                                                        // 328\n       failureStackTrace: Match.Optional(Match.Any)                                                                   // 329\n     }));                                                                                                             // 330\n                                                                                                                      // 331\n     data.timestamp = data.timestamp || new Date();                                                                   // 332\n     data.id = data.id || Random.id();                                                                                // 333\n                                                                                                                      // 334\n     VelocityTestReports.upsert(data.id, {$set: data});                                                               // 335\n                                                                                                                      // 336\n     _updateAggregateReports();                                                                                       // 337\n   },  // end postResult                                                                                              // 338\n                                                                                                                      // 339\n                                                                                                                      // 340\n   /**                                                                                                                // 341\nFrameworks must call this method to inform Velocity they have completed                                         // 342\ntheir current test runs. Velocity uses this flag when running in CI mode.                                       // 343\n                                                                                                                // 344",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "data",
                    "description": "// 346",
                    "type": "Object",
                    "props": [
                        {
                            "name": "",
                            "description": "Name of a test framework.  Ex. 'jasmine'                                         // 347\n/                                                                                                                // 348\n   'velocity/reports/completed': function (data) {                                                                    // 349\n     check(data, {                                                                                                    // 350\n       framework: String                                                                                              // 351\n     });                                                                                                              // 352\n                                                                                                                      // 353\n     VelocityAggregateReports.upsert({'name': data.framework},                                                        // 354\n       {$set: {'result': 'completed'}});                                                                              // 355\n     _updateAggregateReports();                                                                                       // 356\n   },  // end completed                                                                                               // 357\n                                                                                                                      // 358\n                                                                                                                      // 359\n   /**                                                                                                                // 360\nCopy sample tests from frameworks `sample-tests` directories                                                    // 361\nto the user's application's `tests` directory.                                                                  // 362\n                                                                                                                // 363",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "// 366",
                    "type": "Object",
                    "props": [
                        {
                            "name": "",
                            "description": "Framework name. Ex. 'jasmine', 'mocha'                                        // 367\n/                                                                                                                // 368\n   'velocity/copySampleTests': function (options) {                                                                   // 369\n     var sampleTests,                                                                                                 // 370\n         samplesPath,                                                                                                 // 371\n         testsPath,                                                                                                   // 372\n         command;                                                                                                     // 373\n                                                                                                                      // 374\n     options = options || {};                                                                                         // 375\n     check(options, {                                                                                                 // 376\n       framework: String                                                                                              // 377\n     });                                                                                                              // 378\n                                                                                                                      // 379\n     if (_config[options.framework].sampleTestGenerator) {                                                            // 380\n                                                                                                                      // 381\n       sampleTests = _config[options.framework].sampleTestGenerator(options);                                         // 382\n                                                                                                                      // 383\n       DEBUG && console.log('[velocity] found ', sampleTests.length,                                                  // 384\n         'sample test files for', options.framework);                                                                 // 385\n                                                                                                                      // 386\n       sampleTests.forEach(function (testFile) {                                                                      // 387\n         var fullTestPath = path.join(Velocity.getTestsPath(), testFile.path);                                        // 388\n         var testDir = path.dirname(fullTestPath);                                                                    // 389\n         mkdirp.sync(testDir);                                                                                        // 390\n         fs.writeFileSync(fullTestPath, testFile.contents);                                                           // 391\n       });                                                                                                            // 392\n                                                                                                                      // 393\n     } else {                                                                                                         // 394\n                                                                                                                      // 395\n       samplesPath = path.join(Velocity.getAppPath(), 'packages',                                                     // 396\n         options.framework, 'sample-tests');                                                                          // 397\n       testsPath = Velocity.getTestsPath();                                                                           // 398\n                                                                                                                      // 399\n       DEBUG && console.log('[velocity] checking for sample tests in',                                                // 400\n         path.join(samplesPath, '*'));                                                                                // 401\n                                                                                                                      // 402\n       if (fs.existsSync(samplesPath)) {                                                                              // 403\n         command = 'mkdir -p ' + testsPath + ' && ' +                                                                 // 404\n         'rsync -au ' + path.join(samplesPath, '*') +                                                                 // 405\n         ' ' + testsPath + path.sep;                                                                                  // 406\n                                                                                                                      // 407\n         DEBUG && console.log('[velocity] copying sample tests (if any) ' +                                           // 408\n           'for framework', options.framework, '-',                                                                   // 409\n           command);                                                                                                  // 410\n                                                                                                                      // 411\n         child_process.exec(command, Meteor.bindEnvironment(                                                          // 412\n           function copySampleTestsExecHandler (err, stdout, stderr) {                                                // 413\n             if (err) {                                                                                               // 414\n               console.error('ERROR', err);                                                                           // 415\n             }                                                                                                        // 416\n             console.log(stdout);                                                                                     // 417\n             console.error(stderr);                                                                                   // 418\n           },                                                                                                         // 419\n           'copySampleTestsExecHandler'                                                                               // 420\n         ));                                                                                                          // 421\n       }                                                                                                              // 422\n                                                                                                                      // 423\n     }                                                                                                                // 424\n   },  // end copySampleTests                                                                                         // 425\n                                                                                                                      // 426\n                                                                                                                      // 427\n   /**                                                                                                                // 428\nStarts a new mirror if it has not already been started, and reuses an                                           // 429\nexisting one if it is already started.                                                                          // 430\n                                                                                                                // 431\nThis method will update the `VelocityMirrors` collection with `requestId`                                       // 432\nonce the mirror is ready for use.                                                                               // 433\n                                                                                                                // 434",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "Options for the mirror.                                                // 437",
                    "type": "Object",
                    "props": [
                        {
                            "name": "",
                            "description": "The name of the calling framework                                      // 438",
                            "type": "String"
                        },
                        {
                            "name": "",
                            "description": "Array of files with absolute paths                                     // 439",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "String use a specific port                                             // 440",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "Id for the mirror that may be used to query the mirror for status info // 441",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "Adds this string to the end of the root url in the VelocityMirrors collection.\n                                         eg. `/?jasmine=true`                                                   // 443\n                                         Request parameters that velocity-ci uses.                              // 444\n                                                                                                                // 445",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "Required fields:                                                                          // 533\n                  framework - String ex. 'mocha-web-1'                                                            // 534\n                  rootUrl - String ex. 'http://localhost:5000/x=y'                                                // 535\n                                                                                                                  // 536\n                Optional parameters:                                                                              // 537\n                  fixtureFiles - Array of files with absolute paths                                               // 538\n                  port - String use a specific port instead of finding the next available one                     // 539\n                                                                                                                  // 540",
                    "type": "Object",
                    "props": []
                },
                {
                    "name": "options",
                    "description": "Required fields:                                                                          // 585\n                  framework - String ex. 'mocha-web-1'                                                            // 586\n                  port - String the port the mirror that just started / was reused is using                       // 587\n                  requestId - the request id to put in the mirror metadata                                        // 588\n                                                                                                                  // 589",
                    "type": "Object",
                    "props": []
                },
                {
                    "name": "database",
                    "description": "// 687"
                },
                {
                    "name": "port",
                    "description": "Mirror port                                                                                           // 704"
                },
                {
                    "name": "fixtureFiles",
                    "description": "Array with fixture file paths.                                                                // 721"
                },
                {
                    "name": "url",
                    "description": "The target location                                                                           // 739",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Called with (error, result) where error is the exception and result is the status code // 740\n                                                                                                                  // 741",
                    "type": "Function"
                },
                {
                    "name": "config",
                    "description": "See `registerTestingFramework`.                                                           // 791",
                    "type": "Object"
                },
                {
                    "name": "config",
                    "description": "See `registerTestingFramework`.                                                           // 871",
                    "type": "Object"
                },
                {
                    "name": "force",
                    "description": "performs an rsync even if no mirrors have been requested                                             // 964"
                },
                {
                    "name": "options",
                    "description": "// 14",
                    "type": "Object",
                    "props": [
                        {
                            "name": "",
                            "description": "The name of the target framework                                            // 15\n                                        for which the tests should be copied                                        // 16\n                                        to the mirror.                                                              // 17",
                            "type": "String"
                        },
                        {
                            "name": "",
                            "description": "Callback that is called after a                                             // 18\n                                        file was added.                                                             // 19",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "Callback that is called after a                                           // 20\n                                          file has changed.                                                         // 21",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "Callback that is called after a                                           // 22\n                                          file was removed.                                                         // 23",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "Control whether a file is copied.                                            // 24\n                                       Passed the file object from the                                              // 25\n                                       VelocityTestFiles collection which                                           // 26\n                                       has a `absolutePath` field.                                                  // 27\n                                       Default: true                                                                // 28",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "",
                            "description": "A function that converts the                                // 29\n                                                        test file path to the mirror path.                          // 30\n                                                                                                                    // 31",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "type": "// 196!~YUIDOC_LINE~!     _reset(_config);                                                                                                 // 197!~YUIDOC_LINE~!",
            "access": "private",
            "tagname": "// 1023\n/                                                                                                                  // 1024\n function _symlinkPackagesDirIfPresent () {                                                                           // 1025\n   var packagesDir = path.join(process.env.PWD, 'packages'),                                                          // 1026\n       mirrorPackagesDir = path.join(Velocity.getMirrorPath(), 'packages');                                           // 1027\n                                                                                                                      // 1028\n   if (fs.existsSync(packagesDir) && !fs.existsSync(mirrorPackagesDir)) {                                             // 1029\n     fs.symlinkSync(packagesDir, mirrorPackagesDir);                                                                  // 1030\n   }                                                                                                                  // 1031\n                                                                                                                      // 1032\n }                                                                                                                    // 1033\n                                                                                                                      // 1034\n})();                                                                                                                  // 1035\n                                                                                                                      // 1036\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/velocity:core/lib/FileCopier.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n'use strict';                                                                                                          // 1\n                                                                                                                      // 2\nvar _ = Npm.require('lodash');                                                                                         // 3\nvar path = Npm.require('path');                                                                                        // 4\nvar fs = Npm.require('fs-extra');                                                                                      // 5\nvar removeFile = Meteor.wrapAsync(fs.remove);                                                                          // 6\nvar copyFile = Meteor.wrapAsync(fs.copy);                                                                              // 7\n                                                                                                                      // 8\n/**                                                                                                                    // 9\nWorker that copies test files to the mirror reactively.                                                             // 10\n                                                                                                                    // 11"
        },
        "Velocity                                                                                                     // 21\n/                                                                                                                    // 22\nVelocity = {};                                                                                                         // 23\n                                                                                                                      // 24\n(function () {                                                                                                         // 25\n 'use strict';                                                                                                        // 26\n                                                                                                                      // 27\n//////////////////////////////////////////////////////////////////////                                                 // 28\n// Init                                                                                                                // 29\n//                                                                                                                     // 30\n                                                                                                                      // 31\n if (process.env.NODE_ENV !== 'development' ||                                                                        // 32\n   process.env.VELOCITY === '0' ||                                                                                    // 33\n   process.env.IS_MIRROR) {                                                                                           // 34\n   DEBUG && console.log('[velocity] ' + (process.env.IS_MIRROR ? 'Mirror detected -' : '') + 'Not adding velocity core');\n   return;                                                                                                            // 36\n }                                                                                                                    // 37\n                                                                                                                      // 38\n var getAssetPath = function (packageName, fileName) {                                                                // 39\n   var serverAssetsPath = path.join(                                                                                  // 40\n     findAppDir(), '.meteor', 'local', 'build', 'programs', 'server', 'assets'                                        // 41\n   );                                                                                                                 // 42\n                                                                                                                      // 43\n   packageName = packageName.replace(':', '_');                                                                       // 44\n                                                                                                                      // 45\n   return path.join(serverAssetsPath, 'packages', packageName, fileName);                                             // 46\n };                                                                                                                   // 47\n                                                                                                                      // 48\n var _ = Npm.require('lodash'),                                                                                       // 49\n     fs = Npm.require('fs'),                                                                                          // 50\n     fse = Npm.require('fs-extra'),                                                                                   // 51\n     outputFile = Meteor.wrapAsync(fse.outputFile),                                                                   // 52\n     copyFile = Meteor.wrapAsync(fse.copy),                                                                           // 53\n     path = Npm.require('path'),                                                                                      // 54\n     url = Npm.require('url'),                                                                                        // 55\n     Rsync = Npm.require('rsync'),                                                                                    // 56\n     child_process = Npm.require('child_process'),                                                                    // 57\n     chokidar = Npm.require('chokidar'),                                                                              // 58\n     mkdirp = Npm.require('mkdirp'),                                                                                  // 59\n     _config = {},                                                                                                    // 60\n     _preProcessors = [],                                                                                             // 61\n     _postProcessors = [],                                                                                            // 62\n     _watcher,                                                                                                        // 63\n     FIXTURE_REG_EXP = new RegExp('-fixture.(js|coffee)$'),                                                           // 64\n     DEFAULT_FIXTURE_PATH = getAssetPath('velocity:core', 'default-fixture.js'),                                      // 65\n     MIRROR_PID_VAR_TEMPLATE = 'mirror.@PORT.pid';                                                                    // 66\n                                                                                                                      // 67\n Meteor.startup(function initializeVelocity () {                                                                      // 68\n   DEBUG && console.log('[velocity] app dir', Velocity.getAppPath());                                                 // 69\n   DEBUG && console.log('velocity config =', JSON.stringify(_config, null, 2));                                       // 70\n                                                                                                                      // 71\n   // kick-off everything                                                                                             // 72\n   _reset(_config);                                                                                                   // 73\n });                                                                                                                  // 74\n                                                                                                                      // 75\n//////////////////////////////////////////////////////////////////////                                                 // 76\n// Public Methods                                                                                                      // 77\n//                                                                                                                     // 78\n                                                                                                                      // 79\n _.extend(Velocity, {                                                                                                 // 80\n                                                                                                                      // 81\n   /**                                                                                                                // 82\nGet application directory path.                                                                                 // 83\n                                                                                                                // 84": {
            "name": "Velocity                                                                                                     // 21\n/                                                                                                                    // 22\nVelocity = {};                                                                                                         // 23\n                                                                                                                      // 24\n(function () {                                                                                                         // 25\n 'use strict';                                                                                                        // 26\n                                                                                                                      // 27\n//////////////////////////////////////////////////////////////////////                                                 // 28\n// Init                                                                                                                // 29\n//                                                                                                                     // 30\n                                                                                                                      // 31\n if (process.env.NODE_ENV !== 'development' ||                                                                        // 32\n   process.env.VELOCITY === '0' ||                                                                                    // 33\n   process.env.IS_MIRROR) {                                                                                           // 34\n   DEBUG && console.log('[velocity] ' + (process.env.IS_MIRROR ? 'Mirror detected -' : '') + 'Not adding velocity core');\n   return;                                                                                                            // 36\n }                                                                                                                    // 37\n                                                                                                                      // 38\n var getAssetPath = function (packageName, fileName) {                                                                // 39\n   var serverAssetsPath = path.join(                                                                                  // 40\n     findAppDir(), '.meteor', 'local', 'build', 'programs', 'server', 'assets'                                        // 41\n   );                                                                                                                 // 42\n                                                                                                                      // 43\n   packageName = packageName.replace(':', '_');                                                                       // 44\n                                                                                                                      // 45\n   return path.join(serverAssetsPath, 'packages', packageName, fileName);                                             // 46\n };                                                                                                                   // 47\n                                                                                                                      // 48\n var _ = Npm.require('lodash'),                                                                                       // 49\n     fs = Npm.require('fs'),                                                                                          // 50\n     fse = Npm.require('fs-extra'),                                                                                   // 51\n     outputFile = Meteor.wrapAsync(fse.outputFile),                                                                   // 52\n     copyFile = Meteor.wrapAsync(fse.copy),                                                                           // 53\n     path = Npm.require('path'),                                                                                      // 54\n     url = Npm.require('url'),                                                                                        // 55\n     Rsync = Npm.require('rsync'),                                                                                    // 56\n     child_process = Npm.require('child_process'),                                                                    // 57\n     chokidar = Npm.require('chokidar'),                                                                              // 58\n     mkdirp = Npm.require('mkdirp'),                                                                                  // 59\n     _config = {},                                                                                                    // 60\n     _preProcessors = [],                                                                                             // 61\n     _postProcessors = [],                                                                                            // 62\n     _watcher,                                                                                                        // 63\n     FIXTURE_REG_EXP = new RegExp('-fixture.(js|coffee)$'),                                                           // 64\n     DEFAULT_FIXTURE_PATH = getAssetPath('velocity:core', 'default-fixture.js'),                                      // 65\n     MIRROR_PID_VAR_TEMPLATE = 'mirror.@PORT.pid';                                                                    // 66\n                                                                                                                      // 67\n Meteor.startup(function initializeVelocity () {                                                                      // 68\n   DEBUG && console.log('[velocity] app dir', Velocity.getAppPath());                                                 // 69\n   DEBUG && console.log('velocity config =', JSON.stringify(_config, null, 2));                                       // 70\n                                                                                                                      // 71\n   // kick-off everything                                                                                             // 72\n   _reset(_config);                                                                                                   // 73\n });                                                                                                                  // 74\n                                                                                                                      // 75\n//////////////////////////////////////////////////////////////////////                                                 // 76\n// Public Methods                                                                                                      // 77\n//                                                                                                                     // 78\n                                                                                                                      // 79\n _.extend(Velocity, {                                                                                                 // 80\n                                                                                                                      // 81\n   /**                                                                                                                // 82\nGet application directory path.                                                                                 // 83\n                                                                                                                // 84",
            "shortname": "Velocity                                                                                                     // 21\n/                                                                                                                    // 22\nVelocity = {};                                                                                                         // 23\n                                                                                                                      // 24\n(function () {                                                                                                         // 25\n 'use strict';                                                                                                        // 26\n                                                                                                                      // 27\n//////////////////////////////////////////////////////////////////////                                                 // 28\n// Init                                                                                                                // 29\n//                                                                                                                     // 30\n                                                                                                                      // 31\n if (process.env.NODE_ENV !== 'development' ||                                                                        // 32\n   process.env.VELOCITY === '0' ||                                                                                    // 33\n   process.env.IS_MIRROR) {                                                                                           // 34\n   DEBUG && console.log('[velocity] ' + (process.env.IS_MIRROR ? 'Mirror detected -' : '') + 'Not adding velocity core');\n   return;                                                                                                            // 36\n }                                                                                                                    // 37\n                                                                                                                      // 38\n var getAssetPath = function (packageName, fileName) {                                                                // 39\n   var serverAssetsPath = path.join(                                                                                  // 40\n     findAppDir(), '.meteor', 'local', 'build', 'programs', 'server', 'assets'                                        // 41\n   );                                                                                                                 // 42\n                                                                                                                      // 43\n   packageName = packageName.replace(':', '_');                                                                       // 44\n                                                                                                                      // 45\n   return path.join(serverAssetsPath, 'packages', packageName, fileName);                                             // 46\n };                                                                                                                   // 47\n                                                                                                                      // 48\n var _ = Npm.require('lodash'),                                                                                       // 49\n     fs = Npm.require('fs'),                                                                                          // 50\n     fse = Npm.require('fs-extra'),                                                                                   // 51\n     outputFile = Meteor.wrapAsync(fse.outputFile),                                                                   // 52\n     copyFile = Meteor.wrapAsync(fse.copy),                                                                           // 53\n     path = Npm.require('path'),                                                                                      // 54\n     url = Npm.require('url'),                                                                                        // 55\n     Rsync = Npm.require('rsync'),                                                                                    // 56\n     child_process = Npm.require('child_process'),                                                                    // 57\n     chokidar = Npm.require('chokidar'),                                                                              // 58\n     mkdirp = Npm.require('mkdirp'),                                                                                  // 59\n     _config = {},                                                                                                    // 60\n     _preProcessors = [],                                                                                             // 61\n     _postProcessors = [],                                                                                            // 62\n     _watcher,                                                                                                        // 63\n     FIXTURE_REG_EXP = new RegExp('-fixture.(js|coffee)$'),                                                           // 64\n     DEFAULT_FIXTURE_PATH = getAssetPath('velocity:core', 'default-fixture.js'),                                      // 65\n     MIRROR_PID_VAR_TEMPLATE = 'mirror.@PORT.pid';                                                                    // 66\n                                                                                                                      // 67\n Meteor.startup(function initializeVelocity () {                                                                      // 68\n   DEBUG && console.log('[velocity] app dir', Velocity.getAppPath());                                                 // 69\n   DEBUG && console.log('velocity config =', JSON.stringify(_config, null, 2));                                       // 70\n                                                                                                                      // 71\n   // kick-off everything                                                                                             // 72\n   _reset(_config);                                                                                                   // 73\n });                                                                                                                  // 74\n                                                                                                                      // 75\n//////////////////////////////////////////////////////////////////////                                                 // 76\n// Public Methods                                                                                                      // 77\n//                                                                                                                     // 78\n                                                                                                                      // 79\n _.extend(Velocity, {                                                                                                 // 80\n                                                                                                                      // 81\n   /**                                                                                                                // 82\nGet application directory path.                                                                                 // 83\n                                                                                                                // 84",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Velocity                                                                                                    // 10\n/                                                                                                                    // 11\n/**                                                                                                                    // 12\nThe `Velocity` object provides a common API for test frameworks to report                                           // 13\ntest results.  Frameworks can also request assets, such as a copy of the                                            // 14\nuser's application (the 'mirror') in which tests can be safely run without                                          // 15\nimpacting on-going development.                                                                                     // 16\n                                                                                                                    // 17\nTest results and log activity are reported via                                                                      // 18\n{{#crossLink \"Meteor.methods\"}}Meteor methods{{/crossLink}}.                                                        // 19\n                                                                                                                    // 20",
            "namespace": "",
            "file": ".build326888..build.velocity:core/os.osx.x86_64/packages/velocity:core.js",
            "line": 81,
            "description": "Copied from Meteor tools/files.js.                                                                                  // 2\n                                                                                                                    // 3\nIncludes:                                                                                                           // 4\n- Helper to find the app root path                                                                                  // 5\n/                                                                                                                    // 6\n                                                                                                                      // 7\nvar path = Npm.require('path');                                                                                        // 8\nvar fs = Npm.require('fs');                                                                                            // 9\n                                                                                                                      // 10\n// given a predicate function and a starting path, traverse upwards                                                    // 11\n// from the path until we find a path that satisfies the predicate.                                                    // 12\n//                                                                                                                     // 13\n// returns either the path to the lowest level directory that passed                                                   // 14\n// the test or null for none found. if starting path isn't given, use                                                  // 15\n// cwd.                                                                                                                // 16\nvar findUpwards = function (predicate, startPath) {                                                                    // 17\n var testDir = startPath || process.cwd();                                                                            // 18\n while (testDir) {                                                                                                    // 19\n   if (predicate(testDir)) {                                                                                          // 20\n     break;                                                                                                           // 21\n   }                                                                                                                  // 22\n   var newDir = path.dirname(testDir);                                                                                // 23\n   if (newDir === testDir) {                                                                                          // 24\n     testDir = null;                                                                                                  // 25\n   } else {                                                                                                           // 26\n     testDir = newDir;                                                                                                // 27\n   }                                                                                                                  // 28\n }                                                                                                                    // 29\n if (!testDir)                                                                                                        // 30\n   return null;                                                                                                       // 31\n                                                                                                                      // 32\n return testDir;                                                                                                      // 33\n};                                                                                                                     // 34\n                                                                                                                      // 35\n// Determine if 'filepath' (a path, or omit for cwd) is within an app                                                  // 36\n// directory. If so, return the top-level app directory.                                                               // 37\nfindAppDir = function (filepath) {                                                                                     // 38\n var isAppDir = function (filepath) {                                                                                 // 39\n   // XXX once we are done with the transition to engine, this should                                                 // 40\n   // change to: `return fs.existsSync(path.join(filepath, '.meteor',                                                 // 41\n   // 'release'))`                                                                                                    // 42\n                                                                                                                      // 43\n   // .meteor/packages can be a directory, if .meteor is a warehouse                                                  // 44\n   // directory.  since installing meteor initializes a warehouse at                                                  // 45\n   // $HOME/.meteor, we want to make sure your home directory (and all                                                // 46\n   // subdirectories therein) don't count as being within a meteor app.                                               // 47\n   try { // use try/catch to avoid the additional syscall to fs.existsSync                                            // 48\n     return fs.statSync(path.join(filepath, '.meteor', 'packages')).isFile();                                         // 49\n   } catch (e) {                                                                                                      // 50\n     return false;                                                                                                    // 51\n   }                                                                                                                  // 52\n };                                                                                                                   // 53\n                                                                                                                      // 54\n return findUpwards(isAppDir, filepath);                                                                              // 55\n};                                                                                                                     // 56\n                                                                                                                      // 57\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/velocity:core/core.js                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/*jshint -W117, -W030, -W016 */                                                                                        // 1\n/* global                                                                                                              // 2\nVelocity:true,                                                                                                        // 3\nDEBUG:true                                                                                                            // 4\n/                                                                                                                    // 5\n                                                                                                                      // 6\nDEBUG = !!process.env.VELOCITY_DEBUG;                                                                                  // 7\n                                                                                                                      // 8\n/**                                                                                                                    // 9"
        },
        "FileCopier": {
            "name": "FileCopier",
            "shortname": "FileCopier",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Velocity                                                                                                    // 10\n/                                                                                                                    // 11\n/**                                                                                                                    // 12\nThe `Velocity` object provides a common API for test frameworks to report                                           // 13\ntest results.  Frameworks can also request assets, such as a copy of the                                            // 14\nuser's application (the 'mirror') in which tests can be safely run without                                          // 15\nimpacting on-going development.                                                                                     // 16\n                                                                                                                    // 17\nTest results and log activity are reported via                                                                      // 18\n{{#crossLink \"Meteor.methods\"}}Meteor methods{{/crossLink}}.                                                        // 19\n                                                                                                                    // 20",
            "namespace": "",
            "file": "lib/FileCopier.js",
            "line": 9,
            "description": "Worker that copies test files to the mirror reactively.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "targetFramework",
                            "description": "The name of the target framework\n                                        for which the tests should be copied\n                                        to the mirror.",
                            "type": "String"
                        },
                        {
                            "name": "onFileAdded",
                            "description": "Callback that is called after a\n                                        file was added.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onFileChanged",
                            "description": "Callback that is called after a\n                                          file has changed.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onFileRemoved",
                            "description": "Callback that is called after a\n                                          file was removed.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "shouldCopy",
                            "description": "Control whether a file is copied.\n                                       Passed the file object from the\n                                       VelocityTestFiles collection which\n                                       has a `absolutePath` field.\n                                       Default: true",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "convertTestPathToMirrorPath",
                            "description": "A function that converts the\n                                                        test file path to the mirror path.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n    var fileCopier = new Velocity.FileCopier({\n      targetFramework: TEST_FRAMEWORK_NAME\n    });\n    fileCopier.start();"
            ]
        },
        "Velocity": {
            "name": "Velocity",
            "shortname": "Velocity",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Velocity",
            "namespace": "",
            "file": "core.js",
            "line": 12,
            "description": "The `Velocity` object provides a common API for test frameworks to report\ntest results.  Frameworks can also request assets, such as a copy of the\nuser's application (the 'mirror') in which tests can be safely run without\nimpacting on-going development.\n\nTest results and log activity are reported via\n{{#crossLink \"Meteor.methods\"}}Meteor methods{{/crossLink}}."
        },
        "Meteor.methods": {
            "name": "Meteor.methods",
            "shortname": "Meteor.methods",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Velocity",
            "namespace": "",
            "file": "core.js",
            "line": 183,
            "description": "Most communication with Velocity core is done via the following\nMeteor methods."
        }
    },
    "classitems": [
        {
            "file": ".build.velocity:core/os.osx.x86_64/packages/velocity:core/default-fixture.js",
            "line": 19,
            "description": "Meteor method: velocity/isMirror\nExposes the IS_MIRROR flag to mirror clients",
            "itemtype": "method",
            "name": "velocity/isMirror",
            "class": "Velocity                                                                                                     // 21\n/                                                                                                                    // 22\nVelocity = {};                                                                                                         // 23\n                                                                                                                      // 24\n(function () {                                                                                                         // 25\n 'use strict';                                                                                                        // 26\n                                                                                                                      // 27\n//////////////////////////////////////////////////////////////////////                                                 // 28\n// Init                                                                                                                // 29\n//                                                                                                                     // 30\n                                                                                                                      // 31\n if (process.env.NODE_ENV !== 'development' ||                                                                        // 32\n     process.env.VELOCITY === '0' ||                                                                                  // 33\n     process.env.IS_MIRROR) {                                                                                         // 34\n   DEBUG && console.log('[velocity] ' + (process.env.IS_MIRROR ? 'Mirror detected -' : '') + 'Not adding velocity core');\n   return;                                                                                                            // 36\n }                                                                                                                    // 37\n                                                                                                                      // 38\n var getAssetPath = function (packageName, fileName) {                                                                // 39\n   var serverAssetsPath = path.join(                                                                                  // 40\n     findAppDir(), '.meteor', 'local', 'build', 'programs', 'server', 'assets'                                        // 41\n   );                                                                                                                 // 42\n                                                                                                                      // 43\n   packageName = packageName.replace(':', '_');                                                                       // 44\n                                                                                                                      // 45\n   return path.join(serverAssetsPath, 'packages', packageName, fileName);                                             // 46\n };                                                                                                                   // 47\n                                                                                                                      // 48\n var _ = Npm.require('lodash'),                                                                                       // 49\n     fs = Npm.require('fs'),                                                                                          // 50\n     fse = Npm.require('fs-extra'),                                                                                   // 51\n     outputFile = Meteor.wrapAsync(fse.outputFile),                                                                   // 52\n     copyFile = Meteor.wrapAsync(fse.copy),                                                                           // 53\n     path = Npm.require('path'),                                                                                      // 54\n     url = Npm.require('url'),                                                                                        // 55\n     Rsync = Npm.require('rsync'),                                                                                    // 56\n     child_process = Npm.require('child_process'),                                                                    // 57\n     chokidar = Npm.require('chokidar'),                                                                              // 58\n     mkdirp = Npm.require('mkdirp'),                                                                                  // 59\n     _config = {},                                                                                                    // 60\n     _preProcessors = [],                                                                                             // 61\n     _postProcessors = [],                                                                                            // 62\n     _watcher,                                                                                                        // 63\n     FIXTURE_REG_EXP = new RegExp('-fixture.(js|coffee)$'),                                                           // 64\n     DEFAULT_FIXTURE_PATH = getAssetPath('velocity:core', 'default-fixture.js'),                                      // 65\n     MIRROR_PID_VAR_TEMPLATE = 'mirror.@PORT.pid';                                                                    // 66\n                                                                                                                      // 67\n Meteor.startup(function initializeVelocity () {                                                                      // 68\n   DEBUG && console.log('[velocity] app dir', Velocity.getAppPath());                                                 // 69\n   DEBUG && console.log('velocity config =', JSON.stringify(_config, null, 2));                                       // 70\n                                                                                                                      // 71\n   // kick-off everything                                                                                             // 72\n   _reset(_config);                                                                                                   // 73\n });                                                                                                                  // 74\n                                                                                                                      // 75\n//////////////////////////////////////////////////////////////////////                                                 // 76\n// Public Methods                                                                                                      // 77\n//                                                                                                                     // 78\n                                                                                                                      // 79\n _.extend(Velocity, {                                                                                                 // 80\n                                                                                                                      // 81\n   /**                                                                                                                // 82\nGet application directory path.                                                                                 // 83\n                                                                                                                // 84"
        },
        {
            "file": ".build.velocity:core/os.osx.x86_64/packages/velocity:core/default-fixture.js",
            "line": 29,
            "description": "Meteor method: velocity/resetDatabase\nThis truncate all collections in the app by using the native mongo object and calling collection.remove()",
            "itemtype": "method",
            "name": "velocity/resetDatabase",
            "class": "Velocity                                                                                                     // 21\n/                                                                                                                    // 22\nVelocity = {};                                                                                                         // 23\n                                                                                                                      // 24\n(function () {                                                                                                         // 25\n 'use strict';                                                                                                        // 26\n                                                                                                                      // 27\n//////////////////////////////////////////////////////////////////////                                                 // 28\n// Init                                                                                                                // 29\n//                                                                                                                     // 30\n                                                                                                                      // 31\n if (process.env.NODE_ENV !== 'development' ||                                                                        // 32\n     process.env.VELOCITY === '0' ||                                                                                  // 33\n     process.env.IS_MIRROR) {                                                                                         // 34\n   DEBUG && console.log('[velocity] ' + (process.env.IS_MIRROR ? 'Mirror detected -' : '') + 'Not adding velocity core');\n   return;                                                                                                            // 36\n }                                                                                                                    // 37\n                                                                                                                      // 38\n var getAssetPath = function (packageName, fileName) {                                                                // 39\n   var serverAssetsPath = path.join(                                                                                  // 40\n     findAppDir(), '.meteor', 'local', 'build', 'programs', 'server', 'assets'                                        // 41\n   );                                                                                                                 // 42\n                                                                                                                      // 43\n   packageName = packageName.replace(':', '_');                                                                       // 44\n                                                                                                                      // 45\n   return path.join(serverAssetsPath, 'packages', packageName, fileName);                                             // 46\n };                                                                                                                   // 47\n                                                                                                                      // 48\n var _ = Npm.require('lodash'),                                                                                       // 49\n     fs = Npm.require('fs'),                                                                                          // 50\n     fse = Npm.require('fs-extra'),                                                                                   // 51\n     outputFile = Meteor.wrapAsync(fse.outputFile),                                                                   // 52\n     copyFile = Meteor.wrapAsync(fse.copy),                                                                           // 53\n     path = Npm.require('path'),                                                                                      // 54\n     url = Npm.require('url'),                                                                                        // 55\n     Rsync = Npm.require('rsync'),                                                                                    // 56\n     child_process = Npm.require('child_process'),                                                                    // 57\n     chokidar = Npm.require('chokidar'),                                                                              // 58\n     mkdirp = Npm.require('mkdirp'),                                                                                  // 59\n     _config = {},                                                                                                    // 60\n     _preProcessors = [],                                                                                             // 61\n     _postProcessors = [],                                                                                            // 62\n     _watcher,                                                                                                        // 63\n     FIXTURE_REG_EXP = new RegExp('-fixture.(js|coffee)$'),                                                           // 64\n     DEFAULT_FIXTURE_PATH = getAssetPath('velocity:core', 'default-fixture.js'),                                      // 65\n     MIRROR_PID_VAR_TEMPLATE = 'mirror.@PORT.pid';                                                                    // 66\n                                                                                                                      // 67\n Meteor.startup(function initializeVelocity () {                                                                      // 68\n   DEBUG && console.log('[velocity] app dir', Velocity.getAppPath());                                                 // 69\n   DEBUG && console.log('velocity config =', JSON.stringify(_config, null, 2));                                       // 70\n                                                                                                                      // 71\n   // kick-off everything                                                                                             // 72\n   _reset(_config);                                                                                                   // 73\n });                                                                                                                  // 74\n                                                                                                                      // 75\n//////////////////////////////////////////////////////////////////////                                                 // 76\n// Public Methods                                                                                                      // 77\n//                                                                                                                     // 78\n                                                                                                                      // 79\n _.extend(Velocity, {                                                                                                 // 80\n                                                                                                                      // 81\n   /**                                                                                                                // 82\nGet application directory path.                                                                                 // 83\n                                                                                                                // 84"
        },
        {
            "file": ".build326888..build.velocity:core/os.osx.x86_64/packages/velocity:core/default-fixture.js",
            "line": 19,
            "description": "Meteor method: velocity/isMirror\nExposes the IS_MIRROR flag to mirror clients",
            "itemtype": "method",
            "name": "velocity/isMirror",
            "class": "Velocity                                                                                                     // 21\n/                                                                                                                    // 22\nVelocity = {};                                                                                                         // 23\n                                                                                                                      // 24\n(function () {                                                                                                         // 25\n 'use strict';                                                                                                        // 26\n                                                                                                                      // 27\n//////////////////////////////////////////////////////////////////////                                                 // 28\n// Init                                                                                                                // 29\n//                                                                                                                     // 30\n                                                                                                                      // 31\n if (process.env.NODE_ENV !== 'development' ||                                                                        // 32\n   process.env.VELOCITY === '0' ||                                                                                    // 33\n   process.env.IS_MIRROR) {                                                                                           // 34\n   DEBUG && console.log('[velocity] ' + (process.env.IS_MIRROR ? 'Mirror detected -' : '') + 'Not adding velocity core');\n   return;                                                                                                            // 36\n }                                                                                                                    // 37\n                                                                                                                      // 38\n var getAssetPath = function (packageName, fileName) {                                                                // 39\n   var serverAssetsPath = path.join(                                                                                  // 40\n     findAppDir(), '.meteor', 'local', 'build', 'programs', 'server', 'assets'                                        // 41\n   );                                                                                                                 // 42\n                                                                                                                      // 43\n   packageName = packageName.replace(':', '_');                                                                       // 44\n                                                                                                                      // 45\n   return path.join(serverAssetsPath, 'packages', packageName, fileName);                                             // 46\n };                                                                                                                   // 47\n                                                                                                                      // 48\n var _ = Npm.require('lodash'),                                                                                       // 49\n     fs = Npm.require('fs'),                                                                                          // 50\n     fse = Npm.require('fs-extra'),                                                                                   // 51\n     outputFile = Meteor.wrapAsync(fse.outputFile),                                                                   // 52\n     copyFile = Meteor.wrapAsync(fse.copy),                                                                           // 53\n     path = Npm.require('path'),                                                                                      // 54\n     url = Npm.require('url'),                                                                                        // 55\n     Rsync = Npm.require('rsync'),                                                                                    // 56\n     child_process = Npm.require('child_process'),                                                                    // 57\n     chokidar = Npm.require('chokidar'),                                                                              // 58\n     mkdirp = Npm.require('mkdirp'),                                                                                  // 59\n     _config = {},                                                                                                    // 60\n     _preProcessors = [],                                                                                             // 61\n     _postProcessors = [],                                                                                            // 62\n     _watcher,                                                                                                        // 63\n     FIXTURE_REG_EXP = new RegExp('-fixture.(js|coffee)$'),                                                           // 64\n     DEFAULT_FIXTURE_PATH = getAssetPath('velocity:core', 'default-fixture.js'),                                      // 65\n     MIRROR_PID_VAR_TEMPLATE = 'mirror.@PORT.pid';                                                                    // 66\n                                                                                                                      // 67\n Meteor.startup(function initializeVelocity () {                                                                      // 68\n   DEBUG && console.log('[velocity] app dir', Velocity.getAppPath());                                                 // 69\n   DEBUG && console.log('velocity config =', JSON.stringify(_config, null, 2));                                       // 70\n                                                                                                                      // 71\n   // kick-off everything                                                                                             // 72\n   _reset(_config);                                                                                                   // 73\n });                                                                                                                  // 74\n                                                                                                                      // 75\n//////////////////////////////////////////////////////////////////////                                                 // 76\n// Public Methods                                                                                                      // 77\n//                                                                                                                     // 78\n                                                                                                                      // 79\n _.extend(Velocity, {                                                                                                 // 80\n                                                                                                                      // 81\n   /**                                                                                                                // 82\nGet application directory path.                                                                                 // 83\n                                                                                                                // 84",
            "module": "Velocity                                                                                                    // 10\n/                                                                                                                    // 11\n/**                                                                                                                    // 12\nThe `Velocity` object provides a common API for test frameworks to report                                           // 13\ntest results.  Frameworks can also request assets, such as a copy of the                                            // 14\nuser's application (the 'mirror') in which tests can be safely run without                                          // 15\nimpacting on-going development.                                                                                     // 16\n                                                                                                                    // 17\nTest results and log activity are reported via                                                                      // 18\n{{#crossLink \"Meteor.methods\"}}Meteor methods{{/crossLink}}.                                                        // 19\n                                                                                                                    // 20"
        },
        {
            "file": ".build326888..build.velocity:core/os.osx.x86_64/packages/velocity:core/default-fixture.js",
            "line": 29,
            "description": "Meteor method: velocity/resetDatabase\nThis truncate all collections in the app by using the native mongo object and calling collection.remove()",
            "itemtype": "method",
            "name": "velocity/resetDatabase",
            "class": "Velocity                                                                                                     // 21\n/                                                                                                                    // 22\nVelocity = {};                                                                                                         // 23\n                                                                                                                      // 24\n(function () {                                                                                                         // 25\n 'use strict';                                                                                                        // 26\n                                                                                                                      // 27\n//////////////////////////////////////////////////////////////////////                                                 // 28\n// Init                                                                                                                // 29\n//                                                                                                                     // 30\n                                                                                                                      // 31\n if (process.env.NODE_ENV !== 'development' ||                                                                        // 32\n   process.env.VELOCITY === '0' ||                                                                                    // 33\n   process.env.IS_MIRROR) {                                                                                           // 34\n   DEBUG && console.log('[velocity] ' + (process.env.IS_MIRROR ? 'Mirror detected -' : '') + 'Not adding velocity core');\n   return;                                                                                                            // 36\n }                                                                                                                    // 37\n                                                                                                                      // 38\n var getAssetPath = function (packageName, fileName) {                                                                // 39\n   var serverAssetsPath = path.join(                                                                                  // 40\n     findAppDir(), '.meteor', 'local', 'build', 'programs', 'server', 'assets'                                        // 41\n   );                                                                                                                 // 42\n                                                                                                                      // 43\n   packageName = packageName.replace(':', '_');                                                                       // 44\n                                                                                                                      // 45\n   return path.join(serverAssetsPath, 'packages', packageName, fileName);                                             // 46\n };                                                                                                                   // 47\n                                                                                                                      // 48\n var _ = Npm.require('lodash'),                                                                                       // 49\n     fs = Npm.require('fs'),                                                                                          // 50\n     fse = Npm.require('fs-extra'),                                                                                   // 51\n     outputFile = Meteor.wrapAsync(fse.outputFile),                                                                   // 52\n     copyFile = Meteor.wrapAsync(fse.copy),                                                                           // 53\n     path = Npm.require('path'),                                                                                      // 54\n     url = Npm.require('url'),                                                                                        // 55\n     Rsync = Npm.require('rsync'),                                                                                    // 56\n     child_process = Npm.require('child_process'),                                                                    // 57\n     chokidar = Npm.require('chokidar'),                                                                              // 58\n     mkdirp = Npm.require('mkdirp'),                                                                                  // 59\n     _config = {},                                                                                                    // 60\n     _preProcessors = [],                                                                                             // 61\n     _postProcessors = [],                                                                                            // 62\n     _watcher,                                                                                                        // 63\n     FIXTURE_REG_EXP = new RegExp('-fixture.(js|coffee)$'),                                                           // 64\n     DEFAULT_FIXTURE_PATH = getAssetPath('velocity:core', 'default-fixture.js'),                                      // 65\n     MIRROR_PID_VAR_TEMPLATE = 'mirror.@PORT.pid';                                                                    // 66\n                                                                                                                      // 67\n Meteor.startup(function initializeVelocity () {                                                                      // 68\n   DEBUG && console.log('[velocity] app dir', Velocity.getAppPath());                                                 // 69\n   DEBUG && console.log('velocity config =', JSON.stringify(_config, null, 2));                                       // 70\n                                                                                                                      // 71\n   // kick-off everything                                                                                             // 72\n   _reset(_config);                                                                                                   // 73\n });                                                                                                                  // 74\n                                                                                                                      // 75\n//////////////////////////////////////////////////////////////////////                                                 // 76\n// Public Methods                                                                                                      // 77\n//                                                                                                                     // 78\n                                                                                                                      // 79\n _.extend(Velocity, {                                                                                                 // 80\n                                                                                                                      // 81\n   /**                                                                                                                // 82\nGet application directory path.                                                                                 // 83\n                                                                                                                // 84",
            "module": "Velocity                                                                                                    // 10\n/                                                                                                                    // 11\n/**                                                                                                                    // 12\nThe `Velocity` object provides a common API for test frameworks to report                                           // 13\ntest results.  Frameworks can also request assets, such as a copy of the                                            // 14\nuser's application (the 'mirror') in which tests can be safely run without                                          // 15\nimpacting on-going development.                                                                                     // 16\n                                                                                                                    // 17\nTest results and log activity are reported via                                                                      // 18\n{{#crossLink \"Meteor.methods\"}}Meteor methods{{/crossLink}}.                                                        // 19\n                                                                                                                    // 20"
        },
        {
            "file": "lib/meteor/files.js",
            "line": 1,
            "description": "Copied from Meteor tools/files.js.\n\nIncludes:\n- Helper to find the app root path",
            "class": "FileCopier",
            "module": "Velocity                                                                                                    // 10\n/                                                                                                                    // 11\n/**                                                                                                                    // 12\nThe `Velocity` object provides a common API for test frameworks to report                                           // 13\ntest results.  Frameworks can also request assets, such as a copy of the                                            // 14\nuser's application (the 'mirror') in which tests can be safely run without                                          // 15\nimpacting on-going development.                                                                                     // 16\n                                                                                                                    // 17\nTest results and log activity are reported via                                                                      // 18\n{{#crossLink \"Meteor.methods\"}}Meteor methods{{/crossLink}}.                                                        // 19\n                                                                                                                    // 20"
        },
        {
            "file": "lib/FileCopier.js",
            "line": 58,
            "description": "Starts copying files to the mirror.",
            "itemtype": "method",
            "name": "start",
            "memberof": "Velocity.FileCopier.prototype",
            "class": "FileCopier",
            "module": "Velocity                                                                                                    // 10\n/                                                                                                                    // 11\n/**                                                                                                                    // 12\nThe `Velocity` object provides a common API for test frameworks to report                                           // 13\ntest results.  Frameworks can also request assets, such as a copy of the                                            // 14\nuser's application (the 'mirror') in which tests can be safely run without                                          // 15\nimpacting on-going development.                                                                                     // 16\n                                                                                                                    // 17\nTest results and log activity are reported via                                                                      // 18\n{{#crossLink \"Meteor.methods\"}}Meteor methods{{/crossLink}}.                                                        // 19\n                                                                                                                    // 20"
        },
        {
            "file": "lib/FileCopier.js",
            "line": 83,
            "description": "Stops copying files to the mirror.",
            "memberof": "Velocity.FileCopier.prototype",
            "class": "FileCopier",
            "module": "Velocity                                                                                                    // 10\n/                                                                                                                    // 11\n/**                                                                                                                    // 12\nThe `Velocity` object provides a common API for test frameworks to report                                           // 13\ntest results.  Frameworks can also request assets, such as a copy of the                                            // 14\nuser's application (the 'mirror') in which tests can be safely run without                                          // 15\nimpacting on-going development.                                                                                     // 16\n                                                                                                                    // 17\nTest results and log activity are reported via                                                                      // 18\n{{#crossLink \"Meteor.methods\"}}Meteor methods{{/crossLink}}.                                                        // 19\n                                                                                                                    // 20"
        },
        {
            "file": "core.js",
            "line": 82,
            "description": "Get application directory path.",
            "itemtype": "method",
            "name": "getAppPath",
            "return": {
                "description": "app directory path",
                "type": "String"
            },
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 92,
            "description": "Get path to directory of the 'mirror' application.",
            "itemtype": "method",
            "name": "getMirrorPath",
            "return": {
                "description": "mirror directory path",
                "type": "String"
            },
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 102,
            "description": "Get path to application's 'tests' directory",
            "itemtype": "method",
            "name": "getTestsPath",
            "return": {
                "description": "application's tests directory",
                "type": "String"
            },
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 112,
            "description": "Add a callback which will execute when the mirror application\nis sync'ed up with latest application code.  Preprocessors will\nexecute before fixtures are added.",
            "itemtype": "method",
            "name": "addPreProcessor",
            "params": [
                {
                    "name": "preprocessor",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 124,
            "description": "Add a callback which will execute after all tests have completed\nand after the aggregate test results have been reported.",
            "itemtype": "method",
            "name": "addPostProcessor",
            "params": [
                {
                    "name": "reporter",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 135,
            "description": "Get a message that displays where bugs in Velocity core itself should\nbe reported.",
            "itemtype": "method",
            "name": "getReportGithubIssueMessage",
            "return": {
                "description": "message with bug repo url",
                "type": "String"
            },
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 150,
            "description": "Registers a testing framework plugin.",
            "itemtype": "method",
            "name": "registerTestingFramework",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the testing framework.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options for the testing framework.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "disableAutoReset",
                            "description": "Velocity's reset cycle will skip reports and logs for this framework\n                                           It will be the responsibility of the framework to clean up its ****!",
                            "type": "String"
                        },
                        {
                            "name": "regex",
                            "description": "The regular expression for test files that should be assigned\n                                           to the testing framework.\n                                           The path relative to the tests\n                                           folder is matched against it.\n                                           The default is \"name/.+\\.js$\"\n                                           (name is the testing framework name).",
                            "type": "String"
                        },
                        {
                            "name": "sampleTestGenerator",
                            "description": "sampleTestGenerator\n   returns an array of fileObjects with the following fields:",
                            "type": "Function",
                            "props": [
                                {
                                    "name": "path",
                                    "description": "relative path to place test file (from PROJECT/tests)",
                                    "type": "String"
                                },
                                {
                                    "name": "contents",
                                    "description": "contents of the test file the path that's returned",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                }
            ],
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 191,
            "description": "Re-init file watcher and clear all test results.",
            "itemtype": "method",
            "name": "velocity/reset",
            "class": "Meteor.methods",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 200,
            "description": "Clear all test results.",
            "itemtype": "method",
            "name": "velocity/reports/reset",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "framework",
                            "description": "The name of a specific framework\n                 to clear results for.  Ex. 'jasmine' or 'mocha'",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "notIn",
                            "description": "A list of test Ids which should be kept\n                               (not cleared).  These Ids must match the\n                               ones passed to `velocity/reports/submit`.",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Meteor.methods",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 230,
            "description": "Clear all log entries.",
            "itemtype": "method",
            "name": "velocity/logs/reset",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "framework",
                            "description": "The name of a specific framework\n                                    to clear logs for.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Meteor.methods",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 252,
            "description": "Log a message to the Velocity log store.  This provides a central\nlocation for different reporters to query for test framework log\nentries.",
            "itemtype": "method",
            "name": "velocity/logs/submit",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "framework",
                            "description": "The name of the test framework",
                            "type": "String"
                        },
                        {
                            "name": "message",
                            "description": "The message to log",
                            "type": "String"
                        },
                        {
                            "name": "level",
                            "description": "Log level.  Ex. 'error'. Default: 'info'",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "timestamp",
                            "description": "",
                            "type": "Date",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Meteor.methods",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 281,
            "description": "Record the results of an individual test run; a simple collector of\ntest data.\n\nThe `data` object is stored in its entirety; any field may be passed in.\nThe optional fields documented here are suggestions based on what the\nstandard html-reporter supports.  Whether or not a field is actually\nused is up to the specific test reporter that the user has installed.",
            "itemtype": "method",
            "name": "velocity/reports/submit",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "Name of the test that was executed.",
                            "type": "String"
                        },
                        {
                            "name": "framework",
                            "description": "Name of a testing framework.\n                               For example, 'jasmine' or 'mocha'.",
                            "type": "String"
                        },
                        {
                            "name": "result",
                            "description": "The results of the test.  Standard values\n                            are 'passed' and 'failed'.  Different test\n                            reporters can support other values.  For\n                            example, the aggregate tests collection uses\n                            'pending' to indicate that results are still\n                            coming in.",
                            "type": "String"
                        },
                        {
                            "name": "id",
                            "description": "Used to update a specific test result.  If not\n                          provided, frameworks can use the\n                          `velocity/reports/reset` Meteor method to\n                          clear all tests.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "ancestors",
                            "description": "The hierarchy of suites and blocks above\n                                this test. For example,\n                             ['Template', 'leaderboard', 'selected_name']",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "timestamp",
                            "description": "The time that the test started for this\n                               result.",
                            "type": "Date",
                            "optional": true
                        },
                        {
                            "name": "duration",
                            "description": "The test duration in milliseconds.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "browser",
                            "description": "Which browser did the test run in?",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "failureType",
                            "description": "For example, 'expect' or 'assert'",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "failureMessage",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "failureStackTrace",
                            "description": "The stack trace associated with\n                                         the failure",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Meteor.methods",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 341,
            "description": "Frameworks must call this method to inform Velocity they have completed\ntheir current test runs. Velocity uses this flag when running in CI mode.",
            "itemtype": "method",
            "name": "velocity/reports/completed",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "framework",
                            "description": "Name of a test framework.  Ex. 'jasmine'",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Meteor.methods",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 360,
            "description": "Copy sample tests from frameworks `sample-tests` directories\nto the user's application's `tests` directory.",
            "itemtype": "method",
            "name": "velocity/copySampleTests",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "framework",
                            "description": "Framework name. Ex. 'jasmine', 'mocha'",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Meteor.methods",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 428,
            "description": "Starts a new mirror if it has not already been started, and reuses an\nexisting one if it is already started.\n\nThis method will update the `VelocityMirrors` collection with `requestId`\nonce the mirror is ready for use.",
            "itemtype": "method",
            "name": "velocity/mirrors/request",
            "params": [
                {
                    "name": "options",
                    "description": "Options for the mirror.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "framework",
                            "description": "The name of the calling framework",
                            "type": "String"
                        },
                        {
                            "name": "fixtureFiles",
                            "description": "Array of files with absolute paths",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "port",
                            "description": "String use a specific port",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "requestId",
                            "description": "Id for the mirror that may be used to query the mirror for status info",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "rootUrlPath",
                            "description": "Adds this string to the end of the root url in the VelocityMirrors collection.\n                                         eg. `/?jasmine=true`\n                                         Request parameters that velocity-ci uses.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "The `requestId` that can be used to query the mirror",
                "type": "String"
            },
            "class": "Meteor.methods",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 491,
            "description": "Exposes the IS_MIRROR flag to clients",
            "itemtype": "method",
            "name": "velocity/isMirror",
            "return": {
                "description": "true if currently running in mirror",
                "type": "Boolean"
            },
            "class": "Meteor.methods",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 501,
            "description": "Syncs the mirror filesystem on an adhoc basis.\nUsed by the core when file changes are detected.",
            "itemtype": "method",
            "name": "velocity/syncMirror",
            "class": "Meteor.methods",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 521,
            "description": "Starts a mirror and copies any specified fixture files into the mirror.",
            "itemtype": "method",
            "name": "velocityStartMirror",
            "params": [
                {
                    "name": "options",
                    "description": "Required fields:\n                  framework - String ex. 'mocha-web-1'\n                  rootUrl - String ex. 'http://localhost:5000/x=y'\n\n                Optional parameters:\n                  fixtureFiles - Array of files with absolute paths\n                  port - String use a specific port instead of finding the next available one\n                  next - function to call after the mirror has started",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Meteor.methods",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 573,
            "description": "Updated the VelocityMirrors collection with metadata about a newly started or reused mirror",
            "itemtype": "method",
            "name": "_updateMirrorMetadata",
            "params": [
                {
                    "name": "options",
                    "description": "Required fields:\n                  framework - String ex. 'mocha-web-1'\n                  port - String the port the mirror that just started / was reused is using\n                  requestId - the request id to put in the mirror metadata",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Meteor.methods",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 648,
            "description": "Returns true if a mirror with the specified port was started by Velocity and if the pid stored\nat the time is currently running. This method DOES NOT check the actual connection",
            "params": [
                {
                    "name": "port",
                    "description": "this is used to look up the PID for the mirror if it was started by Velocity"
                }
            ],
            "return": {
                "description": "true if the registered mirror process is running",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "Meteor.methods",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 676,
            "description": "Returns the MongoDB URL for the given database.",
            "params": [
                {
                    "name": "database",
                    "description": ""
                }
            ],
            "return": {
                "description": "MongoDB Url",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "Meteor.methods",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 693,
            "description": "Return URL for the mirror with the given port.",
            "params": [
                {
                    "name": "port",
                    "description": "Mirror port"
                }
            ],
            "return": {
                "description": "Mirror URL",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "Meteor.methods",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 710,
            "description": "Add fixtures to the database.",
            "params": [
                {
                    "name": "fixtureFiles",
                    "description": "Array with fixture file paths."
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Meteor.methods",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 736,
            "description": "Initialize the directory/file watcher.",
            "itemtype": "method",
            "name": "_initWatcher",
            "params": [
                {
                    "name": "config",
                    "description": "See `registerTestingFramework`.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Meteor.methods",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 816,
            "description": "Re-init file watcher and clear all test results.",
            "itemtype": "method",
            "name": "_reset",
            "params": [
                {
                    "name": "config",
                    "description": "See `registerTestingFramework`.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Meteor.methods",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 861,
            "description": "If any one test has failed, mark the aggregate test result as failed.",
            "itemtype": "method",
            "name": "_updateAggregateReports",
            "access": "private",
            "tagname": "",
            "class": "Meteor.methods",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 904,
            "description": "Creates a physical mirror of the application under .meteor/local/.mirror\n\n    - Any files with the pattern tests/.*  are not copied, this stops .report\n    directory from also being copied.\n\n    TODO - Strips out velocity and reporters from the mirror's .meteor/packages file",
            "itemtype": "method",
            "name": "_syncMirror",
            "params": [
                {
                    "name": "force",
                    "description": "performs an rsync even if no mirrors have been requested"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Meteor.methods",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 976,
            "description": "Checks if the user has a local packages directory, if so it ensures it's symlinked in the mirror.\nThe reason this is needed is because the standard rsync will copy a the packages dir and not respect\nthe symlinks inside it.",
            "itemtype": "method",
            "name": "_symlinkPackagesDirIfPresent",
            "access": "private",
            "tagname": "",
            "class": "Meteor.methods",
            "module": "Velocity"
        },
        {
            "file": "default-fixture.js",
            "line": 19,
            "description": "Meteor method: velocity/isMirror\nExposes the IS_MIRROR flag to mirror clients",
            "itemtype": "method",
            "name": "velocity/isMirror",
            "class": "",
            "module": "Velocity"
        },
        {
            "file": "default-fixture.js",
            "line": 29,
            "description": "Meteor method: velocity/resetDatabase\nThis truncate all collections in the app by using the native mongo object and calling collection.remove()",
            "itemtype": "method",
            "name": "velocity/resetDatabase",
            "class": "",
            "module": "Velocity"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " .build.velocity:core/os.osx.x86_64/packages/velocity:core.js:81"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " .build.velocity:core/os.osx.x86_64/packages/velocity:core.js:81"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " .build.velocity:core/os.osx.x86_64/packages/velocity:core.js:81"
        },
        {
            "message": "unknown tag: memberof",
            "line": " .build.velocity:core/os.osx.x86_64/packages/velocity:core.js:81"
        },
        {
            "message": "unknown tag: memberof",
            "line": " .build.velocity:core/os.osx.x86_64/packages/velocity:core.js:81"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " .build326888..build.velocity:core/os.osx.x86_64/packages/velocity:core.js:81"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " .build326888..build.velocity:core/os.osx.x86_64/packages/velocity:core.js:81"
        },
        {
            "message": "unknown tag: memberof",
            "line": " .build326888..build.velocity:core/os.osx.x86_64/packages/velocity:core.js:81"
        },
        {
            "message": "unknown tag: memberof",
            "line": " .build326888..build.velocity:core/os.osx.x86_64/packages/velocity:core.js:81"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/FileCopier.js:58"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/FileCopier.js:83"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " core.js:648"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " core.js:676"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " core.js:693"
        },
        {
            "message": "Missing item type\nCopied from Meteor tools/files.js.\n\nIncludes:\n- Helper to find the app root path",
            "line": " lib/meteor/files.js:1"
        },
        {
            "message": "Missing item type\nStops copying files to the mirror.",
            "line": " lib/FileCopier.js:83"
        },
        {
            "message": "Missing item type\nReturns true if a mirror with the specified port was started by Velocity and if the pid stored\nat the time is currently running. This method DOES NOT check the actual connection",
            "line": " core.js:648"
        },
        {
            "message": "Missing item type\nReturns the MongoDB URL for the given database.",
            "line": " core.js:676"
        },
        {
            "message": "Missing item type\nReturn URL for the mirror with the given port.",
            "line": " core.js:693"
        },
        {
            "message": "Missing item type\nAdd fixtures to the database.",
            "line": " core.js:710"
        }
    ]
}